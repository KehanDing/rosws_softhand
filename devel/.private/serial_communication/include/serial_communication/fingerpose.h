// Generated by gencpp from file serial_communication/fingerpose.msg
// DO NOT EDIT!


#ifndef SERIAL_COMMUNICATION_MESSAGE_FINGERPOSE_H
#define SERIAL_COMMUNICATION_MESSAGE_FINGERPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace serial_communication
{
template <class ContainerAllocator>
struct fingerpose_
{
  typedef fingerpose_<ContainerAllocator> Type;

  fingerpose_()
    : origin_Q_tag1()
    , origin_Q_tag2()
    , origin_Q_tag3()
    , YAW_DIP()
    , TRANS_DIP()
    , YAW_PIP()
    , TRANS_PIP()
    , YAW_MCP()
    , TRANS_MCP()  {
    }
  fingerpose_(const ContainerAllocator& _alloc)
    : origin_Q_tag1(_alloc)
    , origin_Q_tag2(_alloc)
    , origin_Q_tag3(_alloc)
    , YAW_DIP(_alloc)
    , TRANS_DIP(_alloc)
    , YAW_PIP(_alloc)
    , TRANS_PIP(_alloc)
    , YAW_MCP(_alloc)
    , TRANS_MCP(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _origin_Q_tag1_type;
  _origin_Q_tag1_type origin_Q_tag1;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _origin_Q_tag2_type;
  _origin_Q_tag2_type origin_Q_tag2;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _origin_Q_tag3_type;
  _origin_Q_tag3_type origin_Q_tag3;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _YAW_DIP_type;
  _YAW_DIP_type YAW_DIP;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _TRANS_DIP_type;
  _TRANS_DIP_type TRANS_DIP;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _YAW_PIP_type;
  _YAW_PIP_type YAW_PIP;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _TRANS_PIP_type;
  _TRANS_PIP_type TRANS_PIP;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _YAW_MCP_type;
  _YAW_MCP_type YAW_MCP;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _TRANS_MCP_type;
  _TRANS_MCP_type TRANS_MCP;





  typedef boost::shared_ptr< ::serial_communication::fingerpose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_communication::fingerpose_<ContainerAllocator> const> ConstPtr;

}; // struct fingerpose_

typedef ::serial_communication::fingerpose_<std::allocator<void> > fingerpose;

typedef boost::shared_ptr< ::serial_communication::fingerpose > fingerposePtr;
typedef boost::shared_ptr< ::serial_communication::fingerpose const> fingerposeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_communication::fingerpose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_communication::fingerpose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_communication::fingerpose_<ContainerAllocator1> & lhs, const ::serial_communication::fingerpose_<ContainerAllocator2> & rhs)
{
  return lhs.origin_Q_tag1 == rhs.origin_Q_tag1 &&
    lhs.origin_Q_tag2 == rhs.origin_Q_tag2 &&
    lhs.origin_Q_tag3 == rhs.origin_Q_tag3 &&
    lhs.YAW_DIP == rhs.YAW_DIP &&
    lhs.TRANS_DIP == rhs.TRANS_DIP &&
    lhs.YAW_PIP == rhs.YAW_PIP &&
    lhs.TRANS_PIP == rhs.TRANS_PIP &&
    lhs.YAW_MCP == rhs.YAW_MCP &&
    lhs.TRANS_MCP == rhs.TRANS_MCP;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_communication::fingerpose_<ContainerAllocator1> & lhs, const ::serial_communication::fingerpose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_communication::fingerpose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_communication::fingerpose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::fingerpose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::fingerpose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::fingerpose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::fingerpose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_communication::fingerpose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6052868b9a4add2e7c42afe8a4c83c4d";
  }

  static const char* value(const ::serial_communication::fingerpose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6052868b9a4add2eULL;
  static const uint64_t static_value2 = 0x7c42afe8a4c83c4dULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_communication::fingerpose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_communication/fingerpose";
  }

  static const char* value(const ::serial_communication::fingerpose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_communication::fingerpose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Quaternion origin_Q_tag1\n"
"geometry_msgs/Quaternion origin_Q_tag2\n"
"geometry_msgs/Quaternion origin_Q_tag3\n"
"geometry_msgs/Vector3 YAW_DIP\n"
"geometry_msgs/Vector3 TRANS_DIP\n"
"geometry_msgs/Vector3 YAW_PIP\n"
"geometry_msgs/Vector3 TRANS_PIP\n"
"geometry_msgs/Vector3 YAW_MCP\n"
"geometry_msgs/Vector3 TRANS_MCP\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::serial_communication::fingerpose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_communication::fingerpose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.origin_Q_tag1);
      stream.next(m.origin_Q_tag2);
      stream.next(m.origin_Q_tag3);
      stream.next(m.YAW_DIP);
      stream.next(m.TRANS_DIP);
      stream.next(m.YAW_PIP);
      stream.next(m.TRANS_PIP);
      stream.next(m.YAW_MCP);
      stream.next(m.TRANS_MCP);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fingerpose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_communication::fingerpose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_communication::fingerpose_<ContainerAllocator>& v)
  {
    s << indent << "origin_Q_tag1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.origin_Q_tag1);
    s << indent << "origin_Q_tag2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.origin_Q_tag2);
    s << indent << "origin_Q_tag3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.origin_Q_tag3);
    s << indent << "YAW_DIP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.YAW_DIP);
    s << indent << "TRANS_DIP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.TRANS_DIP);
    s << indent << "YAW_PIP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.YAW_PIP);
    s << indent << "TRANS_PIP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.TRANS_PIP);
    s << indent << "YAW_MCP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.YAW_MCP);
    s << indent << "TRANS_MCP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.TRANS_MCP);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMMUNICATION_MESSAGE_FINGERPOSE_H
