// Generated by gencpp from file serial_communication/lzq.msg
// DO NOT EDIT!


#ifndef SERIAL_COMMUNICATION_MESSAGE_LZQ_H
#define SERIAL_COMMUNICATION_MESSAGE_LZQ_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_communication
{
template <class ContainerAllocator>
struct lzq_
{
  typedef lzq_<ContainerAllocator> Type;

  lzq_()
    : num(0)
    , thumb(0.0)
    , index(0.0)
    , middle(0.0)
    , ring(0.0)
    , little(0.0)  {
    }
  lzq_(const ContainerAllocator& _alloc)
    : num(0)
    , thumb(0.0)
    , index(0.0)
    , middle(0.0)
    , ring(0.0)
    , little(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _num_type;
  _num_type num;

   typedef float _thumb_type;
  _thumb_type thumb;

   typedef float _index_type;
  _index_type index;

   typedef float _middle_type;
  _middle_type middle;

   typedef float _ring_type;
  _ring_type ring;

   typedef float _little_type;
  _little_type little;





  typedef boost::shared_ptr< ::serial_communication::lzq_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_communication::lzq_<ContainerAllocator> const> ConstPtr;

}; // struct lzq_

typedef ::serial_communication::lzq_<std::allocator<void> > lzq;

typedef boost::shared_ptr< ::serial_communication::lzq > lzqPtr;
typedef boost::shared_ptr< ::serial_communication::lzq const> lzqConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_communication::lzq_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_communication::lzq_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_communication::lzq_<ContainerAllocator1> & lhs, const ::serial_communication::lzq_<ContainerAllocator2> & rhs)
{
  return lhs.num == rhs.num &&
    lhs.thumb == rhs.thumb &&
    lhs.index == rhs.index &&
    lhs.middle == rhs.middle &&
    lhs.ring == rhs.ring &&
    lhs.little == rhs.little;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_communication::lzq_<ContainerAllocator1> & lhs, const ::serial_communication::lzq_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_communication::lzq_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_communication::lzq_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::lzq_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::lzq_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::lzq_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::lzq_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_communication::lzq_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da64289d8beb7c3bfcf74e7727a35840";
  }

  static const char* value(const ::serial_communication::lzq_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda64289d8beb7c3bULL;
  static const uint64_t static_value2 = 0xfcf74e7727a35840ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_communication::lzq_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_communication/lzq";
  }

  static const char* value(const ::serial_communication::lzq_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_communication::lzq_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 num\n"
"float32  thumb\n"
"float32  index\n"
"float32  middle\n"
"float32  ring\n"
"float32  little\n"
;
  }

  static const char* value(const ::serial_communication::lzq_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_communication::lzq_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num);
      stream.next(m.thumb);
      stream.next(m.index);
      stream.next(m.middle);
      stream.next(m.ring);
      stream.next(m.little);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lzq_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_communication::lzq_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_communication::lzq_<ContainerAllocator>& v)
  {
    s << indent << "num: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num);
    s << indent << "thumb: ";
    Printer<float>::stream(s, indent + "  ", v.thumb);
    s << indent << "index: ";
    Printer<float>::stream(s, indent + "  ", v.index);
    s << indent << "middle: ";
    Printer<float>::stream(s, indent + "  ", v.middle);
    s << indent << "ring: ";
    Printer<float>::stream(s, indent + "  ", v.ring);
    s << indent << "little: ";
    Printer<float>::stream(s, indent + "  ", v.little);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMMUNICATION_MESSAGE_LZQ_H
