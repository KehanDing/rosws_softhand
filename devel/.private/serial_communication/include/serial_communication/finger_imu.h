// Generated by gencpp from file serial_communication/finger_imu.msg
// DO NOT EDIT!


#ifndef SERIAL_COMMUNICATION_MESSAGE_FINGER_IMU_H
#define SERIAL_COMMUNICATION_MESSAGE_FINGER_IMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <serial_communication/imu_data.h>
#include <serial_communication/imu_data.h>
#include <serial_communication/imu_data.h>

namespace serial_communication
{
template <class ContainerAllocator>
struct finger_imu_
{
  typedef finger_imu_<ContainerAllocator> Type;

  finger_imu_()
    : PIP()
    , DIP()
    , MCP()  {
    }
  finger_imu_(const ContainerAllocator& _alloc)
    : PIP(_alloc)
    , DIP(_alloc)
    , MCP(_alloc)  {
  (void)_alloc;
    }



   typedef  ::serial_communication::imu_data_<ContainerAllocator>  _PIP_type;
  _PIP_type PIP;

   typedef  ::serial_communication::imu_data_<ContainerAllocator>  _DIP_type;
  _DIP_type DIP;

   typedef  ::serial_communication::imu_data_<ContainerAllocator>  _MCP_type;
  _MCP_type MCP;





  typedef boost::shared_ptr< ::serial_communication::finger_imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_communication::finger_imu_<ContainerAllocator> const> ConstPtr;

}; // struct finger_imu_

typedef ::serial_communication::finger_imu_<std::allocator<void> > finger_imu;

typedef boost::shared_ptr< ::serial_communication::finger_imu > finger_imuPtr;
typedef boost::shared_ptr< ::serial_communication::finger_imu const> finger_imuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_communication::finger_imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_communication::finger_imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_communication::finger_imu_<ContainerAllocator1> & lhs, const ::serial_communication::finger_imu_<ContainerAllocator2> & rhs)
{
  return lhs.PIP == rhs.PIP &&
    lhs.DIP == rhs.DIP &&
    lhs.MCP == rhs.MCP;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_communication::finger_imu_<ContainerAllocator1> & lhs, const ::serial_communication::finger_imu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_communication::finger_imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_communication::finger_imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::finger_imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::finger_imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::finger_imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::finger_imu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_communication::finger_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6bf62a0961009be9a01fecdc8cf84a21";
  }

  static const char* value(const ::serial_communication::finger_imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6bf62a0961009be9ULL;
  static const uint64_t static_value2 = 0xa01fecdc8cf84a21ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_communication::finger_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_communication/finger_imu";
  }

  static const char* value(const ::serial_communication::finger_imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_communication::finger_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imu_data PIP\n"
"imu_data DIP\n"
"imu_data MCP\n"
"================================================================================\n"
"MSG: serial_communication/imu_data\n"
"float32 q0\n"
"float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
;
  }

  static const char* value(const ::serial_communication::finger_imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_communication::finger_imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.PIP);
      stream.next(m.DIP);
      stream.next(m.MCP);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct finger_imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_communication::finger_imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_communication::finger_imu_<ContainerAllocator>& v)
  {
    s << indent << "PIP: ";
    s << std::endl;
    Printer< ::serial_communication::imu_data_<ContainerAllocator> >::stream(s, indent + "  ", v.PIP);
    s << indent << "DIP: ";
    s << std::endl;
    Printer< ::serial_communication::imu_data_<ContainerAllocator> >::stream(s, indent + "  ", v.DIP);
    s << indent << "MCP: ";
    s << std::endl;
    Printer< ::serial_communication::imu_data_<ContainerAllocator> >::stream(s, indent + "  ", v.MCP);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMMUNICATION_MESSAGE_FINGER_IMU_H
