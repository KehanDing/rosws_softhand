// Generated by gencpp from file serial_communication/smc_message.msg
// DO NOT EDIT!


#ifndef SERIAL_COMMUNICATION_MESSAGE_SMC_MESSAGE_H
#define SERIAL_COMMUNICATION_MESSAGE_SMC_MESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_communication
{
template <class ContainerAllocator>
struct smc_message_
{
  typedef smc_message_<ContainerAllocator> Type;

  smc_message_()
    : ID(0)
    , time(0)
    , target_pressure(0.0)
    , feedback_pressure(0.0)
    , error(0.0)
    , smc_uc(0.0)
    , valve_mode(0)  {
    }
  smc_message_(const ContainerAllocator& _alloc)
    : ID(0)
    , time(0)
    , target_pressure(0.0)
    , feedback_pressure(0.0)
    , error(0.0)
    , smc_uc(0.0)
    , valve_mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ID_type;
  _ID_type ID;

   typedef uint32_t _time_type;
  _time_type time;

   typedef float _target_pressure_type;
  _target_pressure_type target_pressure;

   typedef float _feedback_pressure_type;
  _feedback_pressure_type feedback_pressure;

   typedef float _error_type;
  _error_type error;

   typedef float _smc_uc_type;
  _smc_uc_type smc_uc;

   typedef int32_t _valve_mode_type;
  _valve_mode_type valve_mode;





  typedef boost::shared_ptr< ::serial_communication::smc_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_communication::smc_message_<ContainerAllocator> const> ConstPtr;

}; // struct smc_message_

typedef ::serial_communication::smc_message_<std::allocator<void> > smc_message;

typedef boost::shared_ptr< ::serial_communication::smc_message > smc_messagePtr;
typedef boost::shared_ptr< ::serial_communication::smc_message const> smc_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_communication::smc_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_communication::smc_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_communication::smc_message_<ContainerAllocator1> & lhs, const ::serial_communication::smc_message_<ContainerAllocator2> & rhs)
{
  return lhs.ID == rhs.ID &&
    lhs.time == rhs.time &&
    lhs.target_pressure == rhs.target_pressure &&
    lhs.feedback_pressure == rhs.feedback_pressure &&
    lhs.error == rhs.error &&
    lhs.smc_uc == rhs.smc_uc &&
    lhs.valve_mode == rhs.valve_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_communication::smc_message_<ContainerAllocator1> & lhs, const ::serial_communication::smc_message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_communication::smc_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_communication::smc_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::smc_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::smc_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::smc_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::smc_message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_communication::smc_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf432afdc339653f15d6954de7920050";
  }

  static const char* value(const ::serial_communication::smc_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf432afdc339653fULL;
  static const uint64_t static_value2 = 0x15d6954de7920050ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_communication::smc_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_communication/smc_message";
  }

  static const char* value(const ::serial_communication::smc_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_communication::smc_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ID\n"
"uint32 time\n"
"float32 target_pressure\n"
"float32 feedback_pressure\n"
"float32 error\n"
"float32 smc_uc\n"
"int32 valve_mode\n"
;
  }

  static const char* value(const ::serial_communication::smc_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_communication::smc_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.time);
      stream.next(m.target_pressure);
      stream.next(m.feedback_pressure);
      stream.next(m.error);
      stream.next(m.smc_uc);
      stream.next(m.valve_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct smc_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_communication::smc_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_communication::smc_message_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ID);
    s << indent << "time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time);
    s << indent << "target_pressure: ";
    Printer<float>::stream(s, indent + "  ", v.target_pressure);
    s << indent << "feedback_pressure: ";
    Printer<float>::stream(s, indent + "  ", v.feedback_pressure);
    s << indent << "error: ";
    Printer<float>::stream(s, indent + "  ", v.error);
    s << indent << "smc_uc: ";
    Printer<float>::stream(s, indent + "  ", v.smc_uc);
    s << indent << "valve_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.valve_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMMUNICATION_MESSAGE_SMC_MESSAGE_H
