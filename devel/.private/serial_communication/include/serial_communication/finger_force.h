// Generated by gencpp from file serial_communication/finger_force.msg
// DO NOT EDIT!


#ifndef SERIAL_COMMUNICATION_MESSAGE_FINGER_FORCE_H
#define SERIAL_COMMUNICATION_MESSAGE_FINGER_FORCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_communication
{
template <class ContainerAllocator>
struct finger_force_
{
  typedef finger_force_<ContainerAllocator> Type;

  finger_force_()
    : FORCE1(0.0)
    , FORCE2(0.0)
    , FORCE3(0.0)
    , FORCE4(0.0)  {
    }
  finger_force_(const ContainerAllocator& _alloc)
    : FORCE1(0.0)
    , FORCE2(0.0)
    , FORCE3(0.0)
    , FORCE4(0.0)  {
  (void)_alloc;
    }



   typedef float _FORCE1_type;
  _FORCE1_type FORCE1;

   typedef float _FORCE2_type;
  _FORCE2_type FORCE2;

   typedef float _FORCE3_type;
  _FORCE3_type FORCE3;

   typedef float _FORCE4_type;
  _FORCE4_type FORCE4;





  typedef boost::shared_ptr< ::serial_communication::finger_force_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_communication::finger_force_<ContainerAllocator> const> ConstPtr;

}; // struct finger_force_

typedef ::serial_communication::finger_force_<std::allocator<void> > finger_force;

typedef boost::shared_ptr< ::serial_communication::finger_force > finger_forcePtr;
typedef boost::shared_ptr< ::serial_communication::finger_force const> finger_forceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_communication::finger_force_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_communication::finger_force_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_communication::finger_force_<ContainerAllocator1> & lhs, const ::serial_communication::finger_force_<ContainerAllocator2> & rhs)
{
  return lhs.FORCE1 == rhs.FORCE1 &&
    lhs.FORCE2 == rhs.FORCE2 &&
    lhs.FORCE3 == rhs.FORCE3 &&
    lhs.FORCE4 == rhs.FORCE4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_communication::finger_force_<ContainerAllocator1> & lhs, const ::serial_communication::finger_force_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_communication::finger_force_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_communication::finger_force_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::finger_force_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::finger_force_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::finger_force_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::finger_force_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_communication::finger_force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "619b947b757f5681fe65b1c5b569b37c";
  }

  static const char* value(const ::serial_communication::finger_force_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x619b947b757f5681ULL;
  static const uint64_t static_value2 = 0xfe65b1c5b569b37cULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_communication::finger_force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_communication/finger_force";
  }

  static const char* value(const ::serial_communication::finger_force_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_communication::finger_force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 FORCE1\n"
"float32 FORCE2\n"
"float32 FORCE3\n"
"float32 FORCE4\n"
;
  }

  static const char* value(const ::serial_communication::finger_force_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_communication::finger_force_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.FORCE1);
      stream.next(m.FORCE2);
      stream.next(m.FORCE3);
      stream.next(m.FORCE4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct finger_force_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_communication::finger_force_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_communication::finger_force_<ContainerAllocator>& v)
  {
    s << indent << "FORCE1: ";
    Printer<float>::stream(s, indent + "  ", v.FORCE1);
    s << indent << "FORCE2: ";
    Printer<float>::stream(s, indent + "  ", v.FORCE2);
    s << indent << "FORCE3: ";
    Printer<float>::stream(s, indent + "  ", v.FORCE3);
    s << indent << "FORCE4: ";
    Printer<float>::stream(s, indent + "  ", v.FORCE4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMMUNICATION_MESSAGE_FINGER_FORCE_H
