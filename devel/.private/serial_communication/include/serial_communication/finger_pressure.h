// Generated by gencpp from file serial_communication/finger_pressure.msg
// DO NOT EDIT!


#ifndef SERIAL_COMMUNICATION_MESSAGE_FINGER_PRESSURE_H
#define SERIAL_COMMUNICATION_MESSAGE_FINGER_PRESSURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_communication
{
template <class ContainerAllocator>
struct finger_pressure_
{
  typedef finger_pressure_<ContainerAllocator> Type;

  finger_pressure_()
    : IP(0.0)
    , MCPB(0.0)
    , MCPAL(0.0)
    , MCPAR(0.0)  {
    }
  finger_pressure_(const ContainerAllocator& _alloc)
    : IP(0.0)
    , MCPB(0.0)
    , MCPAL(0.0)
    , MCPAR(0.0)  {
  (void)_alloc;
    }



   typedef float _IP_type;
  _IP_type IP;

   typedef float _MCPB_type;
  _MCPB_type MCPB;

   typedef float _MCPAL_type;
  _MCPAL_type MCPAL;

   typedef float _MCPAR_type;
  _MCPAR_type MCPAR;





  typedef boost::shared_ptr< ::serial_communication::finger_pressure_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_communication::finger_pressure_<ContainerAllocator> const> ConstPtr;

}; // struct finger_pressure_

typedef ::serial_communication::finger_pressure_<std::allocator<void> > finger_pressure;

typedef boost::shared_ptr< ::serial_communication::finger_pressure > finger_pressurePtr;
typedef boost::shared_ptr< ::serial_communication::finger_pressure const> finger_pressureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_communication::finger_pressure_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_communication::finger_pressure_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_communication::finger_pressure_<ContainerAllocator1> & lhs, const ::serial_communication::finger_pressure_<ContainerAllocator2> & rhs)
{
  return lhs.IP == rhs.IP &&
    lhs.MCPB == rhs.MCPB &&
    lhs.MCPAL == rhs.MCPAL &&
    lhs.MCPAR == rhs.MCPAR;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_communication::finger_pressure_<ContainerAllocator1> & lhs, const ::serial_communication::finger_pressure_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_communication::finger_pressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_communication::finger_pressure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::finger_pressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::finger_pressure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::finger_pressure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::finger_pressure_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_communication::finger_pressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84aa983bc8589b4da228df1fce3c6dfb";
  }

  static const char* value(const ::serial_communication::finger_pressure_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84aa983bc8589b4dULL;
  static const uint64_t static_value2 = 0xa228df1fce3c6dfbULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_communication::finger_pressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_communication/finger_pressure";
  }

  static const char* value(const ::serial_communication::finger_pressure_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_communication::finger_pressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 IP\n"
"float32 MCPB\n"
"float32 MCPAL\n"
"float32 MCPAR\n"
;
  }

  static const char* value(const ::serial_communication::finger_pressure_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_communication::finger_pressure_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.IP);
      stream.next(m.MCPB);
      stream.next(m.MCPAL);
      stream.next(m.MCPAR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct finger_pressure_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_communication::finger_pressure_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_communication::finger_pressure_<ContainerAllocator>& v)
  {
    s << indent << "IP: ";
    Printer<float>::stream(s, indent + "  ", v.IP);
    s << indent << "MCPB: ";
    Printer<float>::stream(s, indent + "  ", v.MCPB);
    s << indent << "MCPAL: ";
    Printer<float>::stream(s, indent + "  ", v.MCPAL);
    s << indent << "MCPAR: ";
    Printer<float>::stream(s, indent + "  ", v.MCPAR);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMMUNICATION_MESSAGE_FINGER_PRESSURE_H
