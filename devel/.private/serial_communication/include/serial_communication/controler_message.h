// Generated by gencpp from file serial_communication/controler_message.msg
// DO NOT EDIT!


#ifndef SERIAL_COMMUNICATION_MESSAGE_CONTROLER_MESSAGE_H
#define SERIAL_COMMUNICATION_MESSAGE_CONTROLER_MESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <serial_communication/hand_pressure.h>
#include <serial_communication/hand_egain.h>
#include <serial_communication/hand_force.h>
#include <serial_communication/hand_imu.h>

namespace serial_communication
{
template <class ContainerAllocator>
struct controler_message_
{
  typedef controler_message_<ContainerAllocator> Type;

  controler_message_()
    : ID(0)
    , time(0)
    , Pressure_Data()
    , EGaIn_Data()
    , Force_Data()
    , IMU_Data()  {
    }
  controler_message_(const ContainerAllocator& _alloc)
    : ID(0)
    , time(0)
    , Pressure_Data(_alloc)
    , EGaIn_Data(_alloc)
    , Force_Data(_alloc)
    , IMU_Data(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _ID_type;
  _ID_type ID;

   typedef uint16_t _time_type;
  _time_type time;

   typedef  ::serial_communication::hand_pressure_<ContainerAllocator>  _Pressure_Data_type;
  _Pressure_Data_type Pressure_Data;

   typedef  ::serial_communication::hand_egain_<ContainerAllocator>  _EGaIn_Data_type;
  _EGaIn_Data_type EGaIn_Data;

   typedef  ::serial_communication::hand_force_<ContainerAllocator>  _Force_Data_type;
  _Force_Data_type Force_Data;

   typedef  ::serial_communication::hand_imu_<ContainerAllocator>  _IMU_Data_type;
  _IMU_Data_type IMU_Data;





  typedef boost::shared_ptr< ::serial_communication::controler_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_communication::controler_message_<ContainerAllocator> const> ConstPtr;

}; // struct controler_message_

typedef ::serial_communication::controler_message_<std::allocator<void> > controler_message;

typedef boost::shared_ptr< ::serial_communication::controler_message > controler_messagePtr;
typedef boost::shared_ptr< ::serial_communication::controler_message const> controler_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_communication::controler_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_communication::controler_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_communication::controler_message_<ContainerAllocator1> & lhs, const ::serial_communication::controler_message_<ContainerAllocator2> & rhs)
{
  return lhs.ID == rhs.ID &&
    lhs.time == rhs.time &&
    lhs.Pressure_Data == rhs.Pressure_Data &&
    lhs.EGaIn_Data == rhs.EGaIn_Data &&
    lhs.Force_Data == rhs.Force_Data &&
    lhs.IMU_Data == rhs.IMU_Data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_communication::controler_message_<ContainerAllocator1> & lhs, const ::serial_communication::controler_message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_communication::controler_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_communication::controler_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::controler_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::controler_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::controler_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::controler_message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_communication::controler_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01633c681b9e513b3493801e5ce828b9";
  }

  static const char* value(const ::serial_communication::controler_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01633c681b9e513bULL;
  static const uint64_t static_value2 = 0x3493801e5ce828b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_communication::controler_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_communication/controler_message";
  }

  static const char* value(const ::serial_communication::controler_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_communication::controler_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ID\n"
"uint16 time\n"
"hand_pressure Pressure_Data\n"
"hand_egain EGaIn_Data\n"
"hand_force Force_Data\n"
"hand_imu IMU_Data\n"
"================================================================================\n"
"MSG: serial_communication/hand_pressure\n"
"finger_pressure THUMB0\n"
"finger_pressure THUMB1\n"
"finger_pressure INDEX\n"
"finger_pressure MIDDLE\n"
"finger_pressure RING\n"
"finger_pressure LITTLE\n"
"\n"
"================================================================================\n"
"MSG: serial_communication/finger_pressure\n"
"float32 IP\n"
"float32 MCPB\n"
"float32 MCPAL\n"
"float32 MCPAR\n"
"\n"
"================================================================================\n"
"MSG: serial_communication/hand_egain\n"
"finger_egain THUMB0\n"
"finger_egain THUMB1\n"
"finger_egain INDEX\n"
"finger_egain MIDDLE\n"
"finger_egain RING\n"
"finger_egain LITTLE\n"
"\n"
"================================================================================\n"
"MSG: serial_communication/finger_egain\n"
"float32 DIP\n"
"float32 PIP\n"
"float32 MCPL\n"
"float32 MCPR\n"
"\n"
"================================================================================\n"
"MSG: serial_communication/hand_force\n"
"finger_force THUMB0\n"
"finger_force THUMB1\n"
"finger_force INDEX\n"
"finger_force MIDDLE\n"
"finger_force RING\n"
"finger_force LITTLE\n"
"\n"
"================================================================================\n"
"MSG: serial_communication/finger_force\n"
"float32 FORCE1\n"
"float32 FORCE2\n"
"float32 FORCE3\n"
"float32 FORCE4\n"
"\n"
"================================================================================\n"
"MSG: serial_communication/hand_imu\n"
"uint8 ID\n"
"uint16 time\n"
"finger_imu THUMB\n"
"finger_imu INDEX\n"
"finger_imu MIDDLE\n"
"finger_imu RING\n"
"finger_imu LITTLE\n"
"imu_data PALM\n"
"================================================================================\n"
"MSG: serial_communication/finger_imu\n"
"imu_data PIP\n"
"imu_data DIP\n"
"imu_data MCP\n"
"================================================================================\n"
"MSG: serial_communication/imu_data\n"
"float32 q0\n"
"float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
;
  }

  static const char* value(const ::serial_communication::controler_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_communication::controler_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.time);
      stream.next(m.Pressure_Data);
      stream.next(m.EGaIn_Data);
      stream.next(m.Force_Data);
      stream.next(m.IMU_Data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controler_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_communication::controler_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_communication::controler_message_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ID);
    s << indent << "time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.time);
    s << indent << "Pressure_Data: ";
    s << std::endl;
    Printer< ::serial_communication::hand_pressure_<ContainerAllocator> >::stream(s, indent + "  ", v.Pressure_Data);
    s << indent << "EGaIn_Data: ";
    s << std::endl;
    Printer< ::serial_communication::hand_egain_<ContainerAllocator> >::stream(s, indent + "  ", v.EGaIn_Data);
    s << indent << "Force_Data: ";
    s << std::endl;
    Printer< ::serial_communication::hand_force_<ContainerAllocator> >::stream(s, indent + "  ", v.Force_Data);
    s << indent << "IMU_Data: ";
    s << std::endl;
    Printer< ::serial_communication::hand_imu_<ContainerAllocator> >::stream(s, indent + "  ", v.IMU_Data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMMUNICATION_MESSAGE_CONTROLER_MESSAGE_H
