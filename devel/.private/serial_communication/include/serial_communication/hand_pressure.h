// Generated by gencpp from file serial_communication/hand_pressure.msg
// DO NOT EDIT!


#ifndef SERIAL_COMMUNICATION_MESSAGE_HAND_PRESSURE_H
#define SERIAL_COMMUNICATION_MESSAGE_HAND_PRESSURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <serial_communication/finger_pressure.h>
#include <serial_communication/finger_pressure.h>
#include <serial_communication/finger_pressure.h>
#include <serial_communication/finger_pressure.h>
#include <serial_communication/finger_pressure.h>
#include <serial_communication/finger_pressure.h>

namespace serial_communication
{
template <class ContainerAllocator>
struct hand_pressure_
{
  typedef hand_pressure_<ContainerAllocator> Type;

  hand_pressure_()
    : THUMB0()
    , THUMB1()
    , INDEX()
    , MIDDLE()
    , RING()
    , LITTLE()  {
    }
  hand_pressure_(const ContainerAllocator& _alloc)
    : THUMB0(_alloc)
    , THUMB1(_alloc)
    , INDEX(_alloc)
    , MIDDLE(_alloc)
    , RING(_alloc)
    , LITTLE(_alloc)  {
  (void)_alloc;
    }



   typedef  ::serial_communication::finger_pressure_<ContainerAllocator>  _THUMB0_type;
  _THUMB0_type THUMB0;

   typedef  ::serial_communication::finger_pressure_<ContainerAllocator>  _THUMB1_type;
  _THUMB1_type THUMB1;

   typedef  ::serial_communication::finger_pressure_<ContainerAllocator>  _INDEX_type;
  _INDEX_type INDEX;

   typedef  ::serial_communication::finger_pressure_<ContainerAllocator>  _MIDDLE_type;
  _MIDDLE_type MIDDLE;

   typedef  ::serial_communication::finger_pressure_<ContainerAllocator>  _RING_type;
  _RING_type RING;

   typedef  ::serial_communication::finger_pressure_<ContainerAllocator>  _LITTLE_type;
  _LITTLE_type LITTLE;





  typedef boost::shared_ptr< ::serial_communication::hand_pressure_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_communication::hand_pressure_<ContainerAllocator> const> ConstPtr;

}; // struct hand_pressure_

typedef ::serial_communication::hand_pressure_<std::allocator<void> > hand_pressure;

typedef boost::shared_ptr< ::serial_communication::hand_pressure > hand_pressurePtr;
typedef boost::shared_ptr< ::serial_communication::hand_pressure const> hand_pressureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_communication::hand_pressure_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_communication::hand_pressure_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_communication::hand_pressure_<ContainerAllocator1> & lhs, const ::serial_communication::hand_pressure_<ContainerAllocator2> & rhs)
{
  return lhs.THUMB0 == rhs.THUMB0 &&
    lhs.THUMB1 == rhs.THUMB1 &&
    lhs.INDEX == rhs.INDEX &&
    lhs.MIDDLE == rhs.MIDDLE &&
    lhs.RING == rhs.RING &&
    lhs.LITTLE == rhs.LITTLE;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_communication::hand_pressure_<ContainerAllocator1> & lhs, const ::serial_communication::hand_pressure_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_communication::hand_pressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_communication::hand_pressure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::hand_pressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::hand_pressure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::hand_pressure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::hand_pressure_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_communication::hand_pressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a99f6e26a2b17742b15161bbca8bdbd8";
  }

  static const char* value(const ::serial_communication::hand_pressure_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa99f6e26a2b17742ULL;
  static const uint64_t static_value2 = 0xb15161bbca8bdbd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_communication::hand_pressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_communication/hand_pressure";
  }

  static const char* value(const ::serial_communication::hand_pressure_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_communication::hand_pressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "finger_pressure THUMB0\n"
"finger_pressure THUMB1\n"
"finger_pressure INDEX\n"
"finger_pressure MIDDLE\n"
"finger_pressure RING\n"
"finger_pressure LITTLE\n"
"\n"
"================================================================================\n"
"MSG: serial_communication/finger_pressure\n"
"float32 IP\n"
"float32 MCPB\n"
"float32 MCPAL\n"
"float32 MCPAR\n"
;
  }

  static const char* value(const ::serial_communication::hand_pressure_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_communication::hand_pressure_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.THUMB0);
      stream.next(m.THUMB1);
      stream.next(m.INDEX);
      stream.next(m.MIDDLE);
      stream.next(m.RING);
      stream.next(m.LITTLE);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hand_pressure_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_communication::hand_pressure_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_communication::hand_pressure_<ContainerAllocator>& v)
  {
    s << indent << "THUMB0: ";
    s << std::endl;
    Printer< ::serial_communication::finger_pressure_<ContainerAllocator> >::stream(s, indent + "  ", v.THUMB0);
    s << indent << "THUMB1: ";
    s << std::endl;
    Printer< ::serial_communication::finger_pressure_<ContainerAllocator> >::stream(s, indent + "  ", v.THUMB1);
    s << indent << "INDEX: ";
    s << std::endl;
    Printer< ::serial_communication::finger_pressure_<ContainerAllocator> >::stream(s, indent + "  ", v.INDEX);
    s << indent << "MIDDLE: ";
    s << std::endl;
    Printer< ::serial_communication::finger_pressure_<ContainerAllocator> >::stream(s, indent + "  ", v.MIDDLE);
    s << indent << "RING: ";
    s << std::endl;
    Printer< ::serial_communication::finger_pressure_<ContainerAllocator> >::stream(s, indent + "  ", v.RING);
    s << indent << "LITTLE: ";
    s << std::endl;
    Printer< ::serial_communication::finger_pressure_<ContainerAllocator> >::stream(s, indent + "  ", v.LITTLE);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMMUNICATION_MESSAGE_HAND_PRESSURE_H
