// Generated by gencpp from file serial_communication/imu_data.msg
// DO NOT EDIT!


#ifndef SERIAL_COMMUNICATION_MESSAGE_IMU_DATA_H
#define SERIAL_COMMUNICATION_MESSAGE_IMU_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_communication
{
template <class ContainerAllocator>
struct imu_data_
{
  typedef imu_data_<ContainerAllocator> Type;

  imu_data_()
    : q0(0.0)
    , q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
    }
  imu_data_(const ContainerAllocator& _alloc)
    : q0(0.0)
    , q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef float _q0_type;
  _q0_type q0;

   typedef float _q1_type;
  _q1_type q1;

   typedef float _q2_type;
  _q2_type q2;

   typedef float _q3_type;
  _q3_type q3;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::serial_communication::imu_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_communication::imu_data_<ContainerAllocator> const> ConstPtr;

}; // struct imu_data_

typedef ::serial_communication::imu_data_<std::allocator<void> > imu_data;

typedef boost::shared_ptr< ::serial_communication::imu_data > imu_dataPtr;
typedef boost::shared_ptr< ::serial_communication::imu_data const> imu_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_communication::imu_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_communication::imu_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_communication::imu_data_<ContainerAllocator1> & lhs, const ::serial_communication::imu_data_<ContainerAllocator2> & rhs)
{
  return lhs.q0 == rhs.q0 &&
    lhs.q1 == rhs.q1 &&
    lhs.q2 == rhs.q2 &&
    lhs.q3 == rhs.q3 &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_communication::imu_data_<ContainerAllocator1> & lhs, const ::serial_communication::imu_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_communication::imu_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_communication::imu_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::imu_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::imu_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::imu_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::imu_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_communication::imu_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d90a0bd5bc5bbd22e7c1d361f155ca1";
  }

  static const char* value(const ::serial_communication::imu_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d90a0bd5bc5bbd2ULL;
  static const uint64_t static_value2 = 0x2e7c1d361f155ca1ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_communication::imu_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_communication/imu_data";
  }

  static const char* value(const ::serial_communication::imu_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_communication::imu_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 q0\n"
"float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
;
  }

  static const char* value(const ::serial_communication::imu_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_communication::imu_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q0);
      stream.next(m.q1);
      stream.next(m.q2);
      stream.next(m.q3);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_communication::imu_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_communication::imu_data_<ContainerAllocator>& v)
  {
    s << indent << "q0: ";
    Printer<float>::stream(s, indent + "  ", v.q0);
    s << indent << "q1: ";
    Printer<float>::stream(s, indent + "  ", v.q1);
    s << indent << "q2: ";
    Printer<float>::stream(s, indent + "  ", v.q2);
    s << indent << "q3: ";
    Printer<float>::stream(s, indent + "  ", v.q3);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMMUNICATION_MESSAGE_IMU_DATA_H
