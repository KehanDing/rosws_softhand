// Generated by gencpp from file serial_communication/finger_egain.msg
// DO NOT EDIT!


#ifndef SERIAL_COMMUNICATION_MESSAGE_FINGER_EGAIN_H
#define SERIAL_COMMUNICATION_MESSAGE_FINGER_EGAIN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_communication
{
template <class ContainerAllocator>
struct finger_egain_
{
  typedef finger_egain_<ContainerAllocator> Type;

  finger_egain_()
    : DIP(0.0)
    , PIP(0.0)
    , MCPL(0.0)
    , MCPR(0.0)  {
    }
  finger_egain_(const ContainerAllocator& _alloc)
    : DIP(0.0)
    , PIP(0.0)
    , MCPL(0.0)
    , MCPR(0.0)  {
  (void)_alloc;
    }



   typedef float _DIP_type;
  _DIP_type DIP;

   typedef float _PIP_type;
  _PIP_type PIP;

   typedef float _MCPL_type;
  _MCPL_type MCPL;

   typedef float _MCPR_type;
  _MCPR_type MCPR;





  typedef boost::shared_ptr< ::serial_communication::finger_egain_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_communication::finger_egain_<ContainerAllocator> const> ConstPtr;

}; // struct finger_egain_

typedef ::serial_communication::finger_egain_<std::allocator<void> > finger_egain;

typedef boost::shared_ptr< ::serial_communication::finger_egain > finger_egainPtr;
typedef boost::shared_ptr< ::serial_communication::finger_egain const> finger_egainConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_communication::finger_egain_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_communication::finger_egain_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_communication::finger_egain_<ContainerAllocator1> & lhs, const ::serial_communication::finger_egain_<ContainerAllocator2> & rhs)
{
  return lhs.DIP == rhs.DIP &&
    lhs.PIP == rhs.PIP &&
    lhs.MCPL == rhs.MCPL &&
    lhs.MCPR == rhs.MCPR;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_communication::finger_egain_<ContainerAllocator1> & lhs, const ::serial_communication::finger_egain_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_communication::finger_egain_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_communication::finger_egain_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::finger_egain_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::finger_egain_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::finger_egain_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::finger_egain_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_communication::finger_egain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6915de8760abcc9afcc2687afb58825d";
  }

  static const char* value(const ::serial_communication::finger_egain_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6915de8760abcc9aULL;
  static const uint64_t static_value2 = 0xfcc2687afb58825dULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_communication::finger_egain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_communication/finger_egain";
  }

  static const char* value(const ::serial_communication::finger_egain_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_communication::finger_egain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 DIP\n"
"float32 PIP\n"
"float32 MCPL\n"
"float32 MCPR\n"
;
  }

  static const char* value(const ::serial_communication::finger_egain_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_communication::finger_egain_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.DIP);
      stream.next(m.PIP);
      stream.next(m.MCPL);
      stream.next(m.MCPR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct finger_egain_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_communication::finger_egain_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_communication::finger_egain_<ContainerAllocator>& v)
  {
    s << indent << "DIP: ";
    Printer<float>::stream(s, indent + "  ", v.DIP);
    s << indent << "PIP: ";
    Printer<float>::stream(s, indent + "  ", v.PIP);
    s << indent << "MCPL: ";
    Printer<float>::stream(s, indent + "  ", v.MCPL);
    s << indent << "MCPR: ";
    Printer<float>::stream(s, indent + "  ", v.MCPR);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMMUNICATION_MESSAGE_FINGER_EGAIN_H
