// Generated by gencpp from file serial_communication/pulso_message.msg
// DO NOT EDIT!


#ifndef SERIAL_COMMUNICATION_MESSAGE_PULSO_MESSAGE_H
#define SERIAL_COMMUNICATION_MESSAGE_PULSO_MESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_communication
{
template <class ContainerAllocator>
struct pulso_message_
{
  typedef pulso_message_<ContainerAllocator> Type;

  pulso_message_()
    : ID(0)
    , static_pressure_1(0)
    , static_pressure_2(0)
    , static_pressure_3(0)
    , dynamic_pulse_1(0)
    , dynamic_pulse_2(0)
    , dynamic_pulse_3(0)  {
    }
  pulso_message_(const ContainerAllocator& _alloc)
    : ID(0)
    , static_pressure_1(0)
    , static_pressure_2(0)
    , static_pressure_3(0)
    , dynamic_pulse_1(0)
    , dynamic_pulse_2(0)
    , dynamic_pulse_3(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ID_type;
  _ID_type ID;

   typedef uint16_t _static_pressure_1_type;
  _static_pressure_1_type static_pressure_1;

   typedef uint16_t _static_pressure_2_type;
  _static_pressure_2_type static_pressure_2;

   typedef uint16_t _static_pressure_3_type;
  _static_pressure_3_type static_pressure_3;

   typedef uint16_t _dynamic_pulse_1_type;
  _dynamic_pulse_1_type dynamic_pulse_1;

   typedef uint16_t _dynamic_pulse_2_type;
  _dynamic_pulse_2_type dynamic_pulse_2;

   typedef uint16_t _dynamic_pulse_3_type;
  _dynamic_pulse_3_type dynamic_pulse_3;





  typedef boost::shared_ptr< ::serial_communication::pulso_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_communication::pulso_message_<ContainerAllocator> const> ConstPtr;

}; // struct pulso_message_

typedef ::serial_communication::pulso_message_<std::allocator<void> > pulso_message;

typedef boost::shared_ptr< ::serial_communication::pulso_message > pulso_messagePtr;
typedef boost::shared_ptr< ::serial_communication::pulso_message const> pulso_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_communication::pulso_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_communication::pulso_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_communication::pulso_message_<ContainerAllocator1> & lhs, const ::serial_communication::pulso_message_<ContainerAllocator2> & rhs)
{
  return lhs.ID == rhs.ID &&
    lhs.static_pressure_1 == rhs.static_pressure_1 &&
    lhs.static_pressure_2 == rhs.static_pressure_2 &&
    lhs.static_pressure_3 == rhs.static_pressure_3 &&
    lhs.dynamic_pulse_1 == rhs.dynamic_pulse_1 &&
    lhs.dynamic_pulse_2 == rhs.dynamic_pulse_2 &&
    lhs.dynamic_pulse_3 == rhs.dynamic_pulse_3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_communication::pulso_message_<ContainerAllocator1> & lhs, const ::serial_communication::pulso_message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_communication::pulso_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_communication::pulso_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::pulso_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_communication::pulso_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::pulso_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_communication::pulso_message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_communication::pulso_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93fb5a6b0af4819896193f51aafdbf6d";
  }

  static const char* value(const ::serial_communication::pulso_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93fb5a6b0af48198ULL;
  static const uint64_t static_value2 = 0x96193f51aafdbf6dULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_communication::pulso_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_communication/pulso_message";
  }

  static const char* value(const ::serial_communication::pulso_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_communication::pulso_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ID\n"
"uint16 static_pressure_1\n"
"uint16 static_pressure_2\n"
"uint16 static_pressure_3\n"
"uint16 dynamic_pulse_1\n"
"uint16 dynamic_pulse_2\n"
"uint16 dynamic_pulse_3\n"
;
  }

  static const char* value(const ::serial_communication::pulso_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_communication::pulso_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.static_pressure_1);
      stream.next(m.static_pressure_2);
      stream.next(m.static_pressure_3);
      stream.next(m.dynamic_pulse_1);
      stream.next(m.dynamic_pulse_2);
      stream.next(m.dynamic_pulse_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pulso_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_communication::pulso_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_communication::pulso_message_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ID);
    s << indent << "static_pressure_1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.static_pressure_1);
    s << indent << "static_pressure_2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.static_pressure_2);
    s << indent << "static_pressure_3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.static_pressure_3);
    s << indent << "dynamic_pulse_1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.dynamic_pulse_1);
    s << indent << "dynamic_pulse_2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.dynamic_pulse_2);
    s << indent << "dynamic_pulse_3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.dynamic_pulse_3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMMUNICATION_MESSAGE_PULSO_MESSAGE_H
