# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from serial_communication/finger_imu.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import serial_communication.msg

class finger_imu(genpy.Message):
  _md5sum = "6bf62a0961009be9a01fecdc8cf84a21"
  _type = "serial_communication/finger_imu"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """imu_data PIP
imu_data DIP
imu_data MCP
================================================================================
MSG: serial_communication/imu_data
float32 q0
float32 q1
float32 q2
float32 q3
float32 roll
float32 pitch
float32 yaw"""
  __slots__ = ['PIP','DIP','MCP']
  _slot_types = ['serial_communication/imu_data','serial_communication/imu_data','serial_communication/imu_data']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       PIP,DIP,MCP

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(finger_imu, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.PIP is None:
        self.PIP = serial_communication.msg.imu_data()
      if self.DIP is None:
        self.DIP = serial_communication.msg.imu_data()
      if self.MCP is None:
        self.MCP = serial_communication.msg.imu_data()
    else:
      self.PIP = serial_communication.msg.imu_data()
      self.DIP = serial_communication.msg.imu_data()
      self.MCP = serial_communication.msg.imu_data()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_21f().pack(_x.PIP.q0, _x.PIP.q1, _x.PIP.q2, _x.PIP.q3, _x.PIP.roll, _x.PIP.pitch, _x.PIP.yaw, _x.DIP.q0, _x.DIP.q1, _x.DIP.q2, _x.DIP.q3, _x.DIP.roll, _x.DIP.pitch, _x.DIP.yaw, _x.MCP.q0, _x.MCP.q1, _x.MCP.q2, _x.MCP.q3, _x.MCP.roll, _x.MCP.pitch, _x.MCP.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.PIP is None:
        self.PIP = serial_communication.msg.imu_data()
      if self.DIP is None:
        self.DIP = serial_communication.msg.imu_data()
      if self.MCP is None:
        self.MCP = serial_communication.msg.imu_data()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.PIP.q0, _x.PIP.q1, _x.PIP.q2, _x.PIP.q3, _x.PIP.roll, _x.PIP.pitch, _x.PIP.yaw, _x.DIP.q0, _x.DIP.q1, _x.DIP.q2, _x.DIP.q3, _x.DIP.roll, _x.DIP.pitch, _x.DIP.yaw, _x.MCP.q0, _x.MCP.q1, _x.MCP.q2, _x.MCP.q3, _x.MCP.roll, _x.MCP.pitch, _x.MCP.yaw,) = _get_struct_21f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_21f().pack(_x.PIP.q0, _x.PIP.q1, _x.PIP.q2, _x.PIP.q3, _x.PIP.roll, _x.PIP.pitch, _x.PIP.yaw, _x.DIP.q0, _x.DIP.q1, _x.DIP.q2, _x.DIP.q3, _x.DIP.roll, _x.DIP.pitch, _x.DIP.yaw, _x.MCP.q0, _x.MCP.q1, _x.MCP.q2, _x.MCP.q3, _x.MCP.roll, _x.MCP.pitch, _x.MCP.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.PIP is None:
        self.PIP = serial_communication.msg.imu_data()
      if self.DIP is None:
        self.DIP = serial_communication.msg.imu_data()
      if self.MCP is None:
        self.MCP = serial_communication.msg.imu_data()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.PIP.q0, _x.PIP.q1, _x.PIP.q2, _x.PIP.q3, _x.PIP.roll, _x.PIP.pitch, _x.PIP.yaw, _x.DIP.q0, _x.DIP.q1, _x.DIP.q2, _x.DIP.q3, _x.DIP.roll, _x.DIP.pitch, _x.DIP.yaw, _x.MCP.q0, _x.MCP.q1, _x.MCP.q2, _x.MCP.q3, _x.MCP.roll, _x.MCP.pitch, _x.MCP.yaw,) = _get_struct_21f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_21f = None
def _get_struct_21f():
    global _struct_21f
    if _struct_21f is None:
        _struct_21f = struct.Struct("<21f")
    return _struct_21f
