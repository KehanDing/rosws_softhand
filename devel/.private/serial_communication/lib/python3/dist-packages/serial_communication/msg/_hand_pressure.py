# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from serial_communication/hand_pressure.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import serial_communication.msg

class hand_pressure(genpy.Message):
  _md5sum = "a99f6e26a2b17742b15161bbca8bdbd8"
  _type = "serial_communication/hand_pressure"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """finger_pressure THUMB0
finger_pressure THUMB1
finger_pressure INDEX
finger_pressure MIDDLE
finger_pressure RING
finger_pressure LITTLE

================================================================================
MSG: serial_communication/finger_pressure
float32 IP
float32 MCPB
float32 MCPAL
float32 MCPAR
"""
  __slots__ = ['THUMB0','THUMB1','INDEX','MIDDLE','RING','LITTLE']
  _slot_types = ['serial_communication/finger_pressure','serial_communication/finger_pressure','serial_communication/finger_pressure','serial_communication/finger_pressure','serial_communication/finger_pressure','serial_communication/finger_pressure']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       THUMB0,THUMB1,INDEX,MIDDLE,RING,LITTLE

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hand_pressure, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.THUMB0 is None:
        self.THUMB0 = serial_communication.msg.finger_pressure()
      if self.THUMB1 is None:
        self.THUMB1 = serial_communication.msg.finger_pressure()
      if self.INDEX is None:
        self.INDEX = serial_communication.msg.finger_pressure()
      if self.MIDDLE is None:
        self.MIDDLE = serial_communication.msg.finger_pressure()
      if self.RING is None:
        self.RING = serial_communication.msg.finger_pressure()
      if self.LITTLE is None:
        self.LITTLE = serial_communication.msg.finger_pressure()
    else:
      self.THUMB0 = serial_communication.msg.finger_pressure()
      self.THUMB1 = serial_communication.msg.finger_pressure()
      self.INDEX = serial_communication.msg.finger_pressure()
      self.MIDDLE = serial_communication.msg.finger_pressure()
      self.RING = serial_communication.msg.finger_pressure()
      self.LITTLE = serial_communication.msg.finger_pressure()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_24f().pack(_x.THUMB0.IP, _x.THUMB0.MCPB, _x.THUMB0.MCPAL, _x.THUMB0.MCPAR, _x.THUMB1.IP, _x.THUMB1.MCPB, _x.THUMB1.MCPAL, _x.THUMB1.MCPAR, _x.INDEX.IP, _x.INDEX.MCPB, _x.INDEX.MCPAL, _x.INDEX.MCPAR, _x.MIDDLE.IP, _x.MIDDLE.MCPB, _x.MIDDLE.MCPAL, _x.MIDDLE.MCPAR, _x.RING.IP, _x.RING.MCPB, _x.RING.MCPAL, _x.RING.MCPAR, _x.LITTLE.IP, _x.LITTLE.MCPB, _x.LITTLE.MCPAL, _x.LITTLE.MCPAR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.THUMB0 is None:
        self.THUMB0 = serial_communication.msg.finger_pressure()
      if self.THUMB1 is None:
        self.THUMB1 = serial_communication.msg.finger_pressure()
      if self.INDEX is None:
        self.INDEX = serial_communication.msg.finger_pressure()
      if self.MIDDLE is None:
        self.MIDDLE = serial_communication.msg.finger_pressure()
      if self.RING is None:
        self.RING = serial_communication.msg.finger_pressure()
      if self.LITTLE is None:
        self.LITTLE = serial_communication.msg.finger_pressure()
      end = 0
      _x = self
      start = end
      end += 96
      (_x.THUMB0.IP, _x.THUMB0.MCPB, _x.THUMB0.MCPAL, _x.THUMB0.MCPAR, _x.THUMB1.IP, _x.THUMB1.MCPB, _x.THUMB1.MCPAL, _x.THUMB1.MCPAR, _x.INDEX.IP, _x.INDEX.MCPB, _x.INDEX.MCPAL, _x.INDEX.MCPAR, _x.MIDDLE.IP, _x.MIDDLE.MCPB, _x.MIDDLE.MCPAL, _x.MIDDLE.MCPAR, _x.RING.IP, _x.RING.MCPB, _x.RING.MCPAL, _x.RING.MCPAR, _x.LITTLE.IP, _x.LITTLE.MCPB, _x.LITTLE.MCPAL, _x.LITTLE.MCPAR,) = _get_struct_24f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_24f().pack(_x.THUMB0.IP, _x.THUMB0.MCPB, _x.THUMB0.MCPAL, _x.THUMB0.MCPAR, _x.THUMB1.IP, _x.THUMB1.MCPB, _x.THUMB1.MCPAL, _x.THUMB1.MCPAR, _x.INDEX.IP, _x.INDEX.MCPB, _x.INDEX.MCPAL, _x.INDEX.MCPAR, _x.MIDDLE.IP, _x.MIDDLE.MCPB, _x.MIDDLE.MCPAL, _x.MIDDLE.MCPAR, _x.RING.IP, _x.RING.MCPB, _x.RING.MCPAL, _x.RING.MCPAR, _x.LITTLE.IP, _x.LITTLE.MCPB, _x.LITTLE.MCPAL, _x.LITTLE.MCPAR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.THUMB0 is None:
        self.THUMB0 = serial_communication.msg.finger_pressure()
      if self.THUMB1 is None:
        self.THUMB1 = serial_communication.msg.finger_pressure()
      if self.INDEX is None:
        self.INDEX = serial_communication.msg.finger_pressure()
      if self.MIDDLE is None:
        self.MIDDLE = serial_communication.msg.finger_pressure()
      if self.RING is None:
        self.RING = serial_communication.msg.finger_pressure()
      if self.LITTLE is None:
        self.LITTLE = serial_communication.msg.finger_pressure()
      end = 0
      _x = self
      start = end
      end += 96
      (_x.THUMB0.IP, _x.THUMB0.MCPB, _x.THUMB0.MCPAL, _x.THUMB0.MCPAR, _x.THUMB1.IP, _x.THUMB1.MCPB, _x.THUMB1.MCPAL, _x.THUMB1.MCPAR, _x.INDEX.IP, _x.INDEX.MCPB, _x.INDEX.MCPAL, _x.INDEX.MCPAR, _x.MIDDLE.IP, _x.MIDDLE.MCPB, _x.MIDDLE.MCPAL, _x.MIDDLE.MCPAR, _x.RING.IP, _x.RING.MCPB, _x.RING.MCPAL, _x.RING.MCPAR, _x.LITTLE.IP, _x.LITTLE.MCPB, _x.LITTLE.MCPAL, _x.LITTLE.MCPAR,) = _get_struct_24f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_24f = None
def _get_struct_24f():
    global _struct_24f
    if _struct_24f is None:
        _struct_24f = struct.Struct("<24f")
    return _struct_24f
