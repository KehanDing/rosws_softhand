# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from serial_communication/handpose.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import serial_communication.msg

class handpose(genpy.Message):
  _md5sum = "130a0e6ad943d5ddee12bd6504eebd8e"
  _type = "serial_communication/handpose"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """fingerpose THUMB
fingerpose INDEX
fingerpose MIDDLE
fingerpose RING
fingerpose LITTLE
================================================================================
MSG: serial_communication/fingerpose
geometry_msgs/Quaternion origin_Q_tag1
geometry_msgs/Quaternion origin_Q_tag2
geometry_msgs/Quaternion origin_Q_tag3
geometry_msgs/Vector3 YAW_DIP
geometry_msgs/Vector3 TRANS_DIP
geometry_msgs/Vector3 YAW_PIP
geometry_msgs/Vector3 TRANS_PIP
geometry_msgs/Vector3 YAW_MCP
geometry_msgs/Vector3 TRANS_MCP

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['THUMB','INDEX','MIDDLE','RING','LITTLE']
  _slot_types = ['serial_communication/fingerpose','serial_communication/fingerpose','serial_communication/fingerpose','serial_communication/fingerpose','serial_communication/fingerpose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       THUMB,INDEX,MIDDLE,RING,LITTLE

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(handpose, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.THUMB is None:
        self.THUMB = serial_communication.msg.fingerpose()
      if self.INDEX is None:
        self.INDEX = serial_communication.msg.fingerpose()
      if self.MIDDLE is None:
        self.MIDDLE = serial_communication.msg.fingerpose()
      if self.RING is None:
        self.RING = serial_communication.msg.fingerpose()
      if self.LITTLE is None:
        self.LITTLE = serial_communication.msg.fingerpose()
    else:
      self.THUMB = serial_communication.msg.fingerpose()
      self.INDEX = serial_communication.msg.fingerpose()
      self.MIDDLE = serial_communication.msg.fingerpose()
      self.RING = serial_communication.msg.fingerpose()
      self.LITTLE = serial_communication.msg.fingerpose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_150d().pack(_x.THUMB.origin_Q_tag1.x, _x.THUMB.origin_Q_tag1.y, _x.THUMB.origin_Q_tag1.z, _x.THUMB.origin_Q_tag1.w, _x.THUMB.origin_Q_tag2.x, _x.THUMB.origin_Q_tag2.y, _x.THUMB.origin_Q_tag2.z, _x.THUMB.origin_Q_tag2.w, _x.THUMB.origin_Q_tag3.x, _x.THUMB.origin_Q_tag3.y, _x.THUMB.origin_Q_tag3.z, _x.THUMB.origin_Q_tag3.w, _x.THUMB.YAW_DIP.x, _x.THUMB.YAW_DIP.y, _x.THUMB.YAW_DIP.z, _x.THUMB.TRANS_DIP.x, _x.THUMB.TRANS_DIP.y, _x.THUMB.TRANS_DIP.z, _x.THUMB.YAW_PIP.x, _x.THUMB.YAW_PIP.y, _x.THUMB.YAW_PIP.z, _x.THUMB.TRANS_PIP.x, _x.THUMB.TRANS_PIP.y, _x.THUMB.TRANS_PIP.z, _x.THUMB.YAW_MCP.x, _x.THUMB.YAW_MCP.y, _x.THUMB.YAW_MCP.z, _x.THUMB.TRANS_MCP.x, _x.THUMB.TRANS_MCP.y, _x.THUMB.TRANS_MCP.z, _x.INDEX.origin_Q_tag1.x, _x.INDEX.origin_Q_tag1.y, _x.INDEX.origin_Q_tag1.z, _x.INDEX.origin_Q_tag1.w, _x.INDEX.origin_Q_tag2.x, _x.INDEX.origin_Q_tag2.y, _x.INDEX.origin_Q_tag2.z, _x.INDEX.origin_Q_tag2.w, _x.INDEX.origin_Q_tag3.x, _x.INDEX.origin_Q_tag3.y, _x.INDEX.origin_Q_tag3.z, _x.INDEX.origin_Q_tag3.w, _x.INDEX.YAW_DIP.x, _x.INDEX.YAW_DIP.y, _x.INDEX.YAW_DIP.z, _x.INDEX.TRANS_DIP.x, _x.INDEX.TRANS_DIP.y, _x.INDEX.TRANS_DIP.z, _x.INDEX.YAW_PIP.x, _x.INDEX.YAW_PIP.y, _x.INDEX.YAW_PIP.z, _x.INDEX.TRANS_PIP.x, _x.INDEX.TRANS_PIP.y, _x.INDEX.TRANS_PIP.z, _x.INDEX.YAW_MCP.x, _x.INDEX.YAW_MCP.y, _x.INDEX.YAW_MCP.z, _x.INDEX.TRANS_MCP.x, _x.INDEX.TRANS_MCP.y, _x.INDEX.TRANS_MCP.z, _x.MIDDLE.origin_Q_tag1.x, _x.MIDDLE.origin_Q_tag1.y, _x.MIDDLE.origin_Q_tag1.z, _x.MIDDLE.origin_Q_tag1.w, _x.MIDDLE.origin_Q_tag2.x, _x.MIDDLE.origin_Q_tag2.y, _x.MIDDLE.origin_Q_tag2.z, _x.MIDDLE.origin_Q_tag2.w, _x.MIDDLE.origin_Q_tag3.x, _x.MIDDLE.origin_Q_tag3.y, _x.MIDDLE.origin_Q_tag3.z, _x.MIDDLE.origin_Q_tag3.w, _x.MIDDLE.YAW_DIP.x, _x.MIDDLE.YAW_DIP.y, _x.MIDDLE.YAW_DIP.z, _x.MIDDLE.TRANS_DIP.x, _x.MIDDLE.TRANS_DIP.y, _x.MIDDLE.TRANS_DIP.z, _x.MIDDLE.YAW_PIP.x, _x.MIDDLE.YAW_PIP.y, _x.MIDDLE.YAW_PIP.z, _x.MIDDLE.TRANS_PIP.x, _x.MIDDLE.TRANS_PIP.y, _x.MIDDLE.TRANS_PIP.z, _x.MIDDLE.YAW_MCP.x, _x.MIDDLE.YAW_MCP.y, _x.MIDDLE.YAW_MCP.z, _x.MIDDLE.TRANS_MCP.x, _x.MIDDLE.TRANS_MCP.y, _x.MIDDLE.TRANS_MCP.z, _x.RING.origin_Q_tag1.x, _x.RING.origin_Q_tag1.y, _x.RING.origin_Q_tag1.z, _x.RING.origin_Q_tag1.w, _x.RING.origin_Q_tag2.x, _x.RING.origin_Q_tag2.y, _x.RING.origin_Q_tag2.z, _x.RING.origin_Q_tag2.w, _x.RING.origin_Q_tag3.x, _x.RING.origin_Q_tag3.y, _x.RING.origin_Q_tag3.z, _x.RING.origin_Q_tag3.w, _x.RING.YAW_DIP.x, _x.RING.YAW_DIP.y, _x.RING.YAW_DIP.z, _x.RING.TRANS_DIP.x, _x.RING.TRANS_DIP.y, _x.RING.TRANS_DIP.z, _x.RING.YAW_PIP.x, _x.RING.YAW_PIP.y, _x.RING.YAW_PIP.z, _x.RING.TRANS_PIP.x, _x.RING.TRANS_PIP.y, _x.RING.TRANS_PIP.z, _x.RING.YAW_MCP.x, _x.RING.YAW_MCP.y, _x.RING.YAW_MCP.z, _x.RING.TRANS_MCP.x, _x.RING.TRANS_MCP.y, _x.RING.TRANS_MCP.z, _x.LITTLE.origin_Q_tag1.x, _x.LITTLE.origin_Q_tag1.y, _x.LITTLE.origin_Q_tag1.z, _x.LITTLE.origin_Q_tag1.w, _x.LITTLE.origin_Q_tag2.x, _x.LITTLE.origin_Q_tag2.y, _x.LITTLE.origin_Q_tag2.z, _x.LITTLE.origin_Q_tag2.w, _x.LITTLE.origin_Q_tag3.x, _x.LITTLE.origin_Q_tag3.y, _x.LITTLE.origin_Q_tag3.z, _x.LITTLE.origin_Q_tag3.w, _x.LITTLE.YAW_DIP.x, _x.LITTLE.YAW_DIP.y, _x.LITTLE.YAW_DIP.z, _x.LITTLE.TRANS_DIP.x, _x.LITTLE.TRANS_DIP.y, _x.LITTLE.TRANS_DIP.z, _x.LITTLE.YAW_PIP.x, _x.LITTLE.YAW_PIP.y, _x.LITTLE.YAW_PIP.z, _x.LITTLE.TRANS_PIP.x, _x.LITTLE.TRANS_PIP.y, _x.LITTLE.TRANS_PIP.z, _x.LITTLE.YAW_MCP.x, _x.LITTLE.YAW_MCP.y, _x.LITTLE.YAW_MCP.z, _x.LITTLE.TRANS_MCP.x, _x.LITTLE.TRANS_MCP.y, _x.LITTLE.TRANS_MCP.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.THUMB is None:
        self.THUMB = serial_communication.msg.fingerpose()
      if self.INDEX is None:
        self.INDEX = serial_communication.msg.fingerpose()
      if self.MIDDLE is None:
        self.MIDDLE = serial_communication.msg.fingerpose()
      if self.RING is None:
        self.RING = serial_communication.msg.fingerpose()
      if self.LITTLE is None:
        self.LITTLE = serial_communication.msg.fingerpose()
      end = 0
      _x = self
      start = end
      end += 1200
      (_x.THUMB.origin_Q_tag1.x, _x.THUMB.origin_Q_tag1.y, _x.THUMB.origin_Q_tag1.z, _x.THUMB.origin_Q_tag1.w, _x.THUMB.origin_Q_tag2.x, _x.THUMB.origin_Q_tag2.y, _x.THUMB.origin_Q_tag2.z, _x.THUMB.origin_Q_tag2.w, _x.THUMB.origin_Q_tag3.x, _x.THUMB.origin_Q_tag3.y, _x.THUMB.origin_Q_tag3.z, _x.THUMB.origin_Q_tag3.w, _x.THUMB.YAW_DIP.x, _x.THUMB.YAW_DIP.y, _x.THUMB.YAW_DIP.z, _x.THUMB.TRANS_DIP.x, _x.THUMB.TRANS_DIP.y, _x.THUMB.TRANS_DIP.z, _x.THUMB.YAW_PIP.x, _x.THUMB.YAW_PIP.y, _x.THUMB.YAW_PIP.z, _x.THUMB.TRANS_PIP.x, _x.THUMB.TRANS_PIP.y, _x.THUMB.TRANS_PIP.z, _x.THUMB.YAW_MCP.x, _x.THUMB.YAW_MCP.y, _x.THUMB.YAW_MCP.z, _x.THUMB.TRANS_MCP.x, _x.THUMB.TRANS_MCP.y, _x.THUMB.TRANS_MCP.z, _x.INDEX.origin_Q_tag1.x, _x.INDEX.origin_Q_tag1.y, _x.INDEX.origin_Q_tag1.z, _x.INDEX.origin_Q_tag1.w, _x.INDEX.origin_Q_tag2.x, _x.INDEX.origin_Q_tag2.y, _x.INDEX.origin_Q_tag2.z, _x.INDEX.origin_Q_tag2.w, _x.INDEX.origin_Q_tag3.x, _x.INDEX.origin_Q_tag3.y, _x.INDEX.origin_Q_tag3.z, _x.INDEX.origin_Q_tag3.w, _x.INDEX.YAW_DIP.x, _x.INDEX.YAW_DIP.y, _x.INDEX.YAW_DIP.z, _x.INDEX.TRANS_DIP.x, _x.INDEX.TRANS_DIP.y, _x.INDEX.TRANS_DIP.z, _x.INDEX.YAW_PIP.x, _x.INDEX.YAW_PIP.y, _x.INDEX.YAW_PIP.z, _x.INDEX.TRANS_PIP.x, _x.INDEX.TRANS_PIP.y, _x.INDEX.TRANS_PIP.z, _x.INDEX.YAW_MCP.x, _x.INDEX.YAW_MCP.y, _x.INDEX.YAW_MCP.z, _x.INDEX.TRANS_MCP.x, _x.INDEX.TRANS_MCP.y, _x.INDEX.TRANS_MCP.z, _x.MIDDLE.origin_Q_tag1.x, _x.MIDDLE.origin_Q_tag1.y, _x.MIDDLE.origin_Q_tag1.z, _x.MIDDLE.origin_Q_tag1.w, _x.MIDDLE.origin_Q_tag2.x, _x.MIDDLE.origin_Q_tag2.y, _x.MIDDLE.origin_Q_tag2.z, _x.MIDDLE.origin_Q_tag2.w, _x.MIDDLE.origin_Q_tag3.x, _x.MIDDLE.origin_Q_tag3.y, _x.MIDDLE.origin_Q_tag3.z, _x.MIDDLE.origin_Q_tag3.w, _x.MIDDLE.YAW_DIP.x, _x.MIDDLE.YAW_DIP.y, _x.MIDDLE.YAW_DIP.z, _x.MIDDLE.TRANS_DIP.x, _x.MIDDLE.TRANS_DIP.y, _x.MIDDLE.TRANS_DIP.z, _x.MIDDLE.YAW_PIP.x, _x.MIDDLE.YAW_PIP.y, _x.MIDDLE.YAW_PIP.z, _x.MIDDLE.TRANS_PIP.x, _x.MIDDLE.TRANS_PIP.y, _x.MIDDLE.TRANS_PIP.z, _x.MIDDLE.YAW_MCP.x, _x.MIDDLE.YAW_MCP.y, _x.MIDDLE.YAW_MCP.z, _x.MIDDLE.TRANS_MCP.x, _x.MIDDLE.TRANS_MCP.y, _x.MIDDLE.TRANS_MCP.z, _x.RING.origin_Q_tag1.x, _x.RING.origin_Q_tag1.y, _x.RING.origin_Q_tag1.z, _x.RING.origin_Q_tag1.w, _x.RING.origin_Q_tag2.x, _x.RING.origin_Q_tag2.y, _x.RING.origin_Q_tag2.z, _x.RING.origin_Q_tag2.w, _x.RING.origin_Q_tag3.x, _x.RING.origin_Q_tag3.y, _x.RING.origin_Q_tag3.z, _x.RING.origin_Q_tag3.w, _x.RING.YAW_DIP.x, _x.RING.YAW_DIP.y, _x.RING.YAW_DIP.z, _x.RING.TRANS_DIP.x, _x.RING.TRANS_DIP.y, _x.RING.TRANS_DIP.z, _x.RING.YAW_PIP.x, _x.RING.YAW_PIP.y, _x.RING.YAW_PIP.z, _x.RING.TRANS_PIP.x, _x.RING.TRANS_PIP.y, _x.RING.TRANS_PIP.z, _x.RING.YAW_MCP.x, _x.RING.YAW_MCP.y, _x.RING.YAW_MCP.z, _x.RING.TRANS_MCP.x, _x.RING.TRANS_MCP.y, _x.RING.TRANS_MCP.z, _x.LITTLE.origin_Q_tag1.x, _x.LITTLE.origin_Q_tag1.y, _x.LITTLE.origin_Q_tag1.z, _x.LITTLE.origin_Q_tag1.w, _x.LITTLE.origin_Q_tag2.x, _x.LITTLE.origin_Q_tag2.y, _x.LITTLE.origin_Q_tag2.z, _x.LITTLE.origin_Q_tag2.w, _x.LITTLE.origin_Q_tag3.x, _x.LITTLE.origin_Q_tag3.y, _x.LITTLE.origin_Q_tag3.z, _x.LITTLE.origin_Q_tag3.w, _x.LITTLE.YAW_DIP.x, _x.LITTLE.YAW_DIP.y, _x.LITTLE.YAW_DIP.z, _x.LITTLE.TRANS_DIP.x, _x.LITTLE.TRANS_DIP.y, _x.LITTLE.TRANS_DIP.z, _x.LITTLE.YAW_PIP.x, _x.LITTLE.YAW_PIP.y, _x.LITTLE.YAW_PIP.z, _x.LITTLE.TRANS_PIP.x, _x.LITTLE.TRANS_PIP.y, _x.LITTLE.TRANS_PIP.z, _x.LITTLE.YAW_MCP.x, _x.LITTLE.YAW_MCP.y, _x.LITTLE.YAW_MCP.z, _x.LITTLE.TRANS_MCP.x, _x.LITTLE.TRANS_MCP.y, _x.LITTLE.TRANS_MCP.z,) = _get_struct_150d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_150d().pack(_x.THUMB.origin_Q_tag1.x, _x.THUMB.origin_Q_tag1.y, _x.THUMB.origin_Q_tag1.z, _x.THUMB.origin_Q_tag1.w, _x.THUMB.origin_Q_tag2.x, _x.THUMB.origin_Q_tag2.y, _x.THUMB.origin_Q_tag2.z, _x.THUMB.origin_Q_tag2.w, _x.THUMB.origin_Q_tag3.x, _x.THUMB.origin_Q_tag3.y, _x.THUMB.origin_Q_tag3.z, _x.THUMB.origin_Q_tag3.w, _x.THUMB.YAW_DIP.x, _x.THUMB.YAW_DIP.y, _x.THUMB.YAW_DIP.z, _x.THUMB.TRANS_DIP.x, _x.THUMB.TRANS_DIP.y, _x.THUMB.TRANS_DIP.z, _x.THUMB.YAW_PIP.x, _x.THUMB.YAW_PIP.y, _x.THUMB.YAW_PIP.z, _x.THUMB.TRANS_PIP.x, _x.THUMB.TRANS_PIP.y, _x.THUMB.TRANS_PIP.z, _x.THUMB.YAW_MCP.x, _x.THUMB.YAW_MCP.y, _x.THUMB.YAW_MCP.z, _x.THUMB.TRANS_MCP.x, _x.THUMB.TRANS_MCP.y, _x.THUMB.TRANS_MCP.z, _x.INDEX.origin_Q_tag1.x, _x.INDEX.origin_Q_tag1.y, _x.INDEX.origin_Q_tag1.z, _x.INDEX.origin_Q_tag1.w, _x.INDEX.origin_Q_tag2.x, _x.INDEX.origin_Q_tag2.y, _x.INDEX.origin_Q_tag2.z, _x.INDEX.origin_Q_tag2.w, _x.INDEX.origin_Q_tag3.x, _x.INDEX.origin_Q_tag3.y, _x.INDEX.origin_Q_tag3.z, _x.INDEX.origin_Q_tag3.w, _x.INDEX.YAW_DIP.x, _x.INDEX.YAW_DIP.y, _x.INDEX.YAW_DIP.z, _x.INDEX.TRANS_DIP.x, _x.INDEX.TRANS_DIP.y, _x.INDEX.TRANS_DIP.z, _x.INDEX.YAW_PIP.x, _x.INDEX.YAW_PIP.y, _x.INDEX.YAW_PIP.z, _x.INDEX.TRANS_PIP.x, _x.INDEX.TRANS_PIP.y, _x.INDEX.TRANS_PIP.z, _x.INDEX.YAW_MCP.x, _x.INDEX.YAW_MCP.y, _x.INDEX.YAW_MCP.z, _x.INDEX.TRANS_MCP.x, _x.INDEX.TRANS_MCP.y, _x.INDEX.TRANS_MCP.z, _x.MIDDLE.origin_Q_tag1.x, _x.MIDDLE.origin_Q_tag1.y, _x.MIDDLE.origin_Q_tag1.z, _x.MIDDLE.origin_Q_tag1.w, _x.MIDDLE.origin_Q_tag2.x, _x.MIDDLE.origin_Q_tag2.y, _x.MIDDLE.origin_Q_tag2.z, _x.MIDDLE.origin_Q_tag2.w, _x.MIDDLE.origin_Q_tag3.x, _x.MIDDLE.origin_Q_tag3.y, _x.MIDDLE.origin_Q_tag3.z, _x.MIDDLE.origin_Q_tag3.w, _x.MIDDLE.YAW_DIP.x, _x.MIDDLE.YAW_DIP.y, _x.MIDDLE.YAW_DIP.z, _x.MIDDLE.TRANS_DIP.x, _x.MIDDLE.TRANS_DIP.y, _x.MIDDLE.TRANS_DIP.z, _x.MIDDLE.YAW_PIP.x, _x.MIDDLE.YAW_PIP.y, _x.MIDDLE.YAW_PIP.z, _x.MIDDLE.TRANS_PIP.x, _x.MIDDLE.TRANS_PIP.y, _x.MIDDLE.TRANS_PIP.z, _x.MIDDLE.YAW_MCP.x, _x.MIDDLE.YAW_MCP.y, _x.MIDDLE.YAW_MCP.z, _x.MIDDLE.TRANS_MCP.x, _x.MIDDLE.TRANS_MCP.y, _x.MIDDLE.TRANS_MCP.z, _x.RING.origin_Q_tag1.x, _x.RING.origin_Q_tag1.y, _x.RING.origin_Q_tag1.z, _x.RING.origin_Q_tag1.w, _x.RING.origin_Q_tag2.x, _x.RING.origin_Q_tag2.y, _x.RING.origin_Q_tag2.z, _x.RING.origin_Q_tag2.w, _x.RING.origin_Q_tag3.x, _x.RING.origin_Q_tag3.y, _x.RING.origin_Q_tag3.z, _x.RING.origin_Q_tag3.w, _x.RING.YAW_DIP.x, _x.RING.YAW_DIP.y, _x.RING.YAW_DIP.z, _x.RING.TRANS_DIP.x, _x.RING.TRANS_DIP.y, _x.RING.TRANS_DIP.z, _x.RING.YAW_PIP.x, _x.RING.YAW_PIP.y, _x.RING.YAW_PIP.z, _x.RING.TRANS_PIP.x, _x.RING.TRANS_PIP.y, _x.RING.TRANS_PIP.z, _x.RING.YAW_MCP.x, _x.RING.YAW_MCP.y, _x.RING.YAW_MCP.z, _x.RING.TRANS_MCP.x, _x.RING.TRANS_MCP.y, _x.RING.TRANS_MCP.z, _x.LITTLE.origin_Q_tag1.x, _x.LITTLE.origin_Q_tag1.y, _x.LITTLE.origin_Q_tag1.z, _x.LITTLE.origin_Q_tag1.w, _x.LITTLE.origin_Q_tag2.x, _x.LITTLE.origin_Q_tag2.y, _x.LITTLE.origin_Q_tag2.z, _x.LITTLE.origin_Q_tag2.w, _x.LITTLE.origin_Q_tag3.x, _x.LITTLE.origin_Q_tag3.y, _x.LITTLE.origin_Q_tag3.z, _x.LITTLE.origin_Q_tag3.w, _x.LITTLE.YAW_DIP.x, _x.LITTLE.YAW_DIP.y, _x.LITTLE.YAW_DIP.z, _x.LITTLE.TRANS_DIP.x, _x.LITTLE.TRANS_DIP.y, _x.LITTLE.TRANS_DIP.z, _x.LITTLE.YAW_PIP.x, _x.LITTLE.YAW_PIP.y, _x.LITTLE.YAW_PIP.z, _x.LITTLE.TRANS_PIP.x, _x.LITTLE.TRANS_PIP.y, _x.LITTLE.TRANS_PIP.z, _x.LITTLE.YAW_MCP.x, _x.LITTLE.YAW_MCP.y, _x.LITTLE.YAW_MCP.z, _x.LITTLE.TRANS_MCP.x, _x.LITTLE.TRANS_MCP.y, _x.LITTLE.TRANS_MCP.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.THUMB is None:
        self.THUMB = serial_communication.msg.fingerpose()
      if self.INDEX is None:
        self.INDEX = serial_communication.msg.fingerpose()
      if self.MIDDLE is None:
        self.MIDDLE = serial_communication.msg.fingerpose()
      if self.RING is None:
        self.RING = serial_communication.msg.fingerpose()
      if self.LITTLE is None:
        self.LITTLE = serial_communication.msg.fingerpose()
      end = 0
      _x = self
      start = end
      end += 1200
      (_x.THUMB.origin_Q_tag1.x, _x.THUMB.origin_Q_tag1.y, _x.THUMB.origin_Q_tag1.z, _x.THUMB.origin_Q_tag1.w, _x.THUMB.origin_Q_tag2.x, _x.THUMB.origin_Q_tag2.y, _x.THUMB.origin_Q_tag2.z, _x.THUMB.origin_Q_tag2.w, _x.THUMB.origin_Q_tag3.x, _x.THUMB.origin_Q_tag3.y, _x.THUMB.origin_Q_tag3.z, _x.THUMB.origin_Q_tag3.w, _x.THUMB.YAW_DIP.x, _x.THUMB.YAW_DIP.y, _x.THUMB.YAW_DIP.z, _x.THUMB.TRANS_DIP.x, _x.THUMB.TRANS_DIP.y, _x.THUMB.TRANS_DIP.z, _x.THUMB.YAW_PIP.x, _x.THUMB.YAW_PIP.y, _x.THUMB.YAW_PIP.z, _x.THUMB.TRANS_PIP.x, _x.THUMB.TRANS_PIP.y, _x.THUMB.TRANS_PIP.z, _x.THUMB.YAW_MCP.x, _x.THUMB.YAW_MCP.y, _x.THUMB.YAW_MCP.z, _x.THUMB.TRANS_MCP.x, _x.THUMB.TRANS_MCP.y, _x.THUMB.TRANS_MCP.z, _x.INDEX.origin_Q_tag1.x, _x.INDEX.origin_Q_tag1.y, _x.INDEX.origin_Q_tag1.z, _x.INDEX.origin_Q_tag1.w, _x.INDEX.origin_Q_tag2.x, _x.INDEX.origin_Q_tag2.y, _x.INDEX.origin_Q_tag2.z, _x.INDEX.origin_Q_tag2.w, _x.INDEX.origin_Q_tag3.x, _x.INDEX.origin_Q_tag3.y, _x.INDEX.origin_Q_tag3.z, _x.INDEX.origin_Q_tag3.w, _x.INDEX.YAW_DIP.x, _x.INDEX.YAW_DIP.y, _x.INDEX.YAW_DIP.z, _x.INDEX.TRANS_DIP.x, _x.INDEX.TRANS_DIP.y, _x.INDEX.TRANS_DIP.z, _x.INDEX.YAW_PIP.x, _x.INDEX.YAW_PIP.y, _x.INDEX.YAW_PIP.z, _x.INDEX.TRANS_PIP.x, _x.INDEX.TRANS_PIP.y, _x.INDEX.TRANS_PIP.z, _x.INDEX.YAW_MCP.x, _x.INDEX.YAW_MCP.y, _x.INDEX.YAW_MCP.z, _x.INDEX.TRANS_MCP.x, _x.INDEX.TRANS_MCP.y, _x.INDEX.TRANS_MCP.z, _x.MIDDLE.origin_Q_tag1.x, _x.MIDDLE.origin_Q_tag1.y, _x.MIDDLE.origin_Q_tag1.z, _x.MIDDLE.origin_Q_tag1.w, _x.MIDDLE.origin_Q_tag2.x, _x.MIDDLE.origin_Q_tag2.y, _x.MIDDLE.origin_Q_tag2.z, _x.MIDDLE.origin_Q_tag2.w, _x.MIDDLE.origin_Q_tag3.x, _x.MIDDLE.origin_Q_tag3.y, _x.MIDDLE.origin_Q_tag3.z, _x.MIDDLE.origin_Q_tag3.w, _x.MIDDLE.YAW_DIP.x, _x.MIDDLE.YAW_DIP.y, _x.MIDDLE.YAW_DIP.z, _x.MIDDLE.TRANS_DIP.x, _x.MIDDLE.TRANS_DIP.y, _x.MIDDLE.TRANS_DIP.z, _x.MIDDLE.YAW_PIP.x, _x.MIDDLE.YAW_PIP.y, _x.MIDDLE.YAW_PIP.z, _x.MIDDLE.TRANS_PIP.x, _x.MIDDLE.TRANS_PIP.y, _x.MIDDLE.TRANS_PIP.z, _x.MIDDLE.YAW_MCP.x, _x.MIDDLE.YAW_MCP.y, _x.MIDDLE.YAW_MCP.z, _x.MIDDLE.TRANS_MCP.x, _x.MIDDLE.TRANS_MCP.y, _x.MIDDLE.TRANS_MCP.z, _x.RING.origin_Q_tag1.x, _x.RING.origin_Q_tag1.y, _x.RING.origin_Q_tag1.z, _x.RING.origin_Q_tag1.w, _x.RING.origin_Q_tag2.x, _x.RING.origin_Q_tag2.y, _x.RING.origin_Q_tag2.z, _x.RING.origin_Q_tag2.w, _x.RING.origin_Q_tag3.x, _x.RING.origin_Q_tag3.y, _x.RING.origin_Q_tag3.z, _x.RING.origin_Q_tag3.w, _x.RING.YAW_DIP.x, _x.RING.YAW_DIP.y, _x.RING.YAW_DIP.z, _x.RING.TRANS_DIP.x, _x.RING.TRANS_DIP.y, _x.RING.TRANS_DIP.z, _x.RING.YAW_PIP.x, _x.RING.YAW_PIP.y, _x.RING.YAW_PIP.z, _x.RING.TRANS_PIP.x, _x.RING.TRANS_PIP.y, _x.RING.TRANS_PIP.z, _x.RING.YAW_MCP.x, _x.RING.YAW_MCP.y, _x.RING.YAW_MCP.z, _x.RING.TRANS_MCP.x, _x.RING.TRANS_MCP.y, _x.RING.TRANS_MCP.z, _x.LITTLE.origin_Q_tag1.x, _x.LITTLE.origin_Q_tag1.y, _x.LITTLE.origin_Q_tag1.z, _x.LITTLE.origin_Q_tag1.w, _x.LITTLE.origin_Q_tag2.x, _x.LITTLE.origin_Q_tag2.y, _x.LITTLE.origin_Q_tag2.z, _x.LITTLE.origin_Q_tag2.w, _x.LITTLE.origin_Q_tag3.x, _x.LITTLE.origin_Q_tag3.y, _x.LITTLE.origin_Q_tag3.z, _x.LITTLE.origin_Q_tag3.w, _x.LITTLE.YAW_DIP.x, _x.LITTLE.YAW_DIP.y, _x.LITTLE.YAW_DIP.z, _x.LITTLE.TRANS_DIP.x, _x.LITTLE.TRANS_DIP.y, _x.LITTLE.TRANS_DIP.z, _x.LITTLE.YAW_PIP.x, _x.LITTLE.YAW_PIP.y, _x.LITTLE.YAW_PIP.z, _x.LITTLE.TRANS_PIP.x, _x.LITTLE.TRANS_PIP.y, _x.LITTLE.TRANS_PIP.z, _x.LITTLE.YAW_MCP.x, _x.LITTLE.YAW_MCP.y, _x.LITTLE.YAW_MCP.z, _x.LITTLE.TRANS_MCP.x, _x.LITTLE.TRANS_MCP.y, _x.LITTLE.TRANS_MCP.z,) = _get_struct_150d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_150d = None
def _get_struct_150d():
    global _struct_150d
    if _struct_150d is None:
        _struct_150d = struct.Struct("<150d")
    return _struct_150d
