# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from serial_communication/hand_imu.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import serial_communication.msg

class hand_imu(genpy.Message):
  _md5sum = "ea982f9506f64da059eb7d3969f058f4"
  _type = "serial_communication/hand_imu"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 ID
uint16 time
finger_imu THUMB
finger_imu INDEX
finger_imu MIDDLE
finger_imu RING
finger_imu LITTLE
imu_data PALM
================================================================================
MSG: serial_communication/finger_imu
imu_data PIP
imu_data DIP
imu_data MCP
================================================================================
MSG: serial_communication/imu_data
float32 q0
float32 q1
float32 q2
float32 q3
float32 roll
float32 pitch
float32 yaw"""
  __slots__ = ['ID','time','THUMB','INDEX','MIDDLE','RING','LITTLE','PALM']
  _slot_types = ['uint8','uint16','serial_communication/finger_imu','serial_communication/finger_imu','serial_communication/finger_imu','serial_communication/finger_imu','serial_communication/finger_imu','serial_communication/imu_data']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ID,time,THUMB,INDEX,MIDDLE,RING,LITTLE,PALM

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hand_imu, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ID is None:
        self.ID = 0
      if self.time is None:
        self.time = 0
      if self.THUMB is None:
        self.THUMB = serial_communication.msg.finger_imu()
      if self.INDEX is None:
        self.INDEX = serial_communication.msg.finger_imu()
      if self.MIDDLE is None:
        self.MIDDLE = serial_communication.msg.finger_imu()
      if self.RING is None:
        self.RING = serial_communication.msg.finger_imu()
      if self.LITTLE is None:
        self.LITTLE = serial_communication.msg.finger_imu()
      if self.PALM is None:
        self.PALM = serial_communication.msg.imu_data()
    else:
      self.ID = 0
      self.time = 0
      self.THUMB = serial_communication.msg.finger_imu()
      self.INDEX = serial_communication.msg.finger_imu()
      self.MIDDLE = serial_communication.msg.finger_imu()
      self.RING = serial_communication.msg.finger_imu()
      self.LITTLE = serial_communication.msg.finger_imu()
      self.PALM = serial_communication.msg.imu_data()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BH112f().pack(_x.ID, _x.time, _x.THUMB.PIP.q0, _x.THUMB.PIP.q1, _x.THUMB.PIP.q2, _x.THUMB.PIP.q3, _x.THUMB.PIP.roll, _x.THUMB.PIP.pitch, _x.THUMB.PIP.yaw, _x.THUMB.DIP.q0, _x.THUMB.DIP.q1, _x.THUMB.DIP.q2, _x.THUMB.DIP.q3, _x.THUMB.DIP.roll, _x.THUMB.DIP.pitch, _x.THUMB.DIP.yaw, _x.THUMB.MCP.q0, _x.THUMB.MCP.q1, _x.THUMB.MCP.q2, _x.THUMB.MCP.q3, _x.THUMB.MCP.roll, _x.THUMB.MCP.pitch, _x.THUMB.MCP.yaw, _x.INDEX.PIP.q0, _x.INDEX.PIP.q1, _x.INDEX.PIP.q2, _x.INDEX.PIP.q3, _x.INDEX.PIP.roll, _x.INDEX.PIP.pitch, _x.INDEX.PIP.yaw, _x.INDEX.DIP.q0, _x.INDEX.DIP.q1, _x.INDEX.DIP.q2, _x.INDEX.DIP.q3, _x.INDEX.DIP.roll, _x.INDEX.DIP.pitch, _x.INDEX.DIP.yaw, _x.INDEX.MCP.q0, _x.INDEX.MCP.q1, _x.INDEX.MCP.q2, _x.INDEX.MCP.q3, _x.INDEX.MCP.roll, _x.INDEX.MCP.pitch, _x.INDEX.MCP.yaw, _x.MIDDLE.PIP.q0, _x.MIDDLE.PIP.q1, _x.MIDDLE.PIP.q2, _x.MIDDLE.PIP.q3, _x.MIDDLE.PIP.roll, _x.MIDDLE.PIP.pitch, _x.MIDDLE.PIP.yaw, _x.MIDDLE.DIP.q0, _x.MIDDLE.DIP.q1, _x.MIDDLE.DIP.q2, _x.MIDDLE.DIP.q3, _x.MIDDLE.DIP.roll, _x.MIDDLE.DIP.pitch, _x.MIDDLE.DIP.yaw, _x.MIDDLE.MCP.q0, _x.MIDDLE.MCP.q1, _x.MIDDLE.MCP.q2, _x.MIDDLE.MCP.q3, _x.MIDDLE.MCP.roll, _x.MIDDLE.MCP.pitch, _x.MIDDLE.MCP.yaw, _x.RING.PIP.q0, _x.RING.PIP.q1, _x.RING.PIP.q2, _x.RING.PIP.q3, _x.RING.PIP.roll, _x.RING.PIP.pitch, _x.RING.PIP.yaw, _x.RING.DIP.q0, _x.RING.DIP.q1, _x.RING.DIP.q2, _x.RING.DIP.q3, _x.RING.DIP.roll, _x.RING.DIP.pitch, _x.RING.DIP.yaw, _x.RING.MCP.q0, _x.RING.MCP.q1, _x.RING.MCP.q2, _x.RING.MCP.q3, _x.RING.MCP.roll, _x.RING.MCP.pitch, _x.RING.MCP.yaw, _x.LITTLE.PIP.q0, _x.LITTLE.PIP.q1, _x.LITTLE.PIP.q2, _x.LITTLE.PIP.q3, _x.LITTLE.PIP.roll, _x.LITTLE.PIP.pitch, _x.LITTLE.PIP.yaw, _x.LITTLE.DIP.q0, _x.LITTLE.DIP.q1, _x.LITTLE.DIP.q2, _x.LITTLE.DIP.q3, _x.LITTLE.DIP.roll, _x.LITTLE.DIP.pitch, _x.LITTLE.DIP.yaw, _x.LITTLE.MCP.q0, _x.LITTLE.MCP.q1, _x.LITTLE.MCP.q2, _x.LITTLE.MCP.q3, _x.LITTLE.MCP.roll, _x.LITTLE.MCP.pitch, _x.LITTLE.MCP.yaw, _x.PALM.q0, _x.PALM.q1, _x.PALM.q2, _x.PALM.q3, _x.PALM.roll, _x.PALM.pitch, _x.PALM.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.THUMB is None:
        self.THUMB = serial_communication.msg.finger_imu()
      if self.INDEX is None:
        self.INDEX = serial_communication.msg.finger_imu()
      if self.MIDDLE is None:
        self.MIDDLE = serial_communication.msg.finger_imu()
      if self.RING is None:
        self.RING = serial_communication.msg.finger_imu()
      if self.LITTLE is None:
        self.LITTLE = serial_communication.msg.finger_imu()
      if self.PALM is None:
        self.PALM = serial_communication.msg.imu_data()
      end = 0
      _x = self
      start = end
      end += 451
      (_x.ID, _x.time, _x.THUMB.PIP.q0, _x.THUMB.PIP.q1, _x.THUMB.PIP.q2, _x.THUMB.PIP.q3, _x.THUMB.PIP.roll, _x.THUMB.PIP.pitch, _x.THUMB.PIP.yaw, _x.THUMB.DIP.q0, _x.THUMB.DIP.q1, _x.THUMB.DIP.q2, _x.THUMB.DIP.q3, _x.THUMB.DIP.roll, _x.THUMB.DIP.pitch, _x.THUMB.DIP.yaw, _x.THUMB.MCP.q0, _x.THUMB.MCP.q1, _x.THUMB.MCP.q2, _x.THUMB.MCP.q3, _x.THUMB.MCP.roll, _x.THUMB.MCP.pitch, _x.THUMB.MCP.yaw, _x.INDEX.PIP.q0, _x.INDEX.PIP.q1, _x.INDEX.PIP.q2, _x.INDEX.PIP.q3, _x.INDEX.PIP.roll, _x.INDEX.PIP.pitch, _x.INDEX.PIP.yaw, _x.INDEX.DIP.q0, _x.INDEX.DIP.q1, _x.INDEX.DIP.q2, _x.INDEX.DIP.q3, _x.INDEX.DIP.roll, _x.INDEX.DIP.pitch, _x.INDEX.DIP.yaw, _x.INDEX.MCP.q0, _x.INDEX.MCP.q1, _x.INDEX.MCP.q2, _x.INDEX.MCP.q3, _x.INDEX.MCP.roll, _x.INDEX.MCP.pitch, _x.INDEX.MCP.yaw, _x.MIDDLE.PIP.q0, _x.MIDDLE.PIP.q1, _x.MIDDLE.PIP.q2, _x.MIDDLE.PIP.q3, _x.MIDDLE.PIP.roll, _x.MIDDLE.PIP.pitch, _x.MIDDLE.PIP.yaw, _x.MIDDLE.DIP.q0, _x.MIDDLE.DIP.q1, _x.MIDDLE.DIP.q2, _x.MIDDLE.DIP.q3, _x.MIDDLE.DIP.roll, _x.MIDDLE.DIP.pitch, _x.MIDDLE.DIP.yaw, _x.MIDDLE.MCP.q0, _x.MIDDLE.MCP.q1, _x.MIDDLE.MCP.q2, _x.MIDDLE.MCP.q3, _x.MIDDLE.MCP.roll, _x.MIDDLE.MCP.pitch, _x.MIDDLE.MCP.yaw, _x.RING.PIP.q0, _x.RING.PIP.q1, _x.RING.PIP.q2, _x.RING.PIP.q3, _x.RING.PIP.roll, _x.RING.PIP.pitch, _x.RING.PIP.yaw, _x.RING.DIP.q0, _x.RING.DIP.q1, _x.RING.DIP.q2, _x.RING.DIP.q3, _x.RING.DIP.roll, _x.RING.DIP.pitch, _x.RING.DIP.yaw, _x.RING.MCP.q0, _x.RING.MCP.q1, _x.RING.MCP.q2, _x.RING.MCP.q3, _x.RING.MCP.roll, _x.RING.MCP.pitch, _x.RING.MCP.yaw, _x.LITTLE.PIP.q0, _x.LITTLE.PIP.q1, _x.LITTLE.PIP.q2, _x.LITTLE.PIP.q3, _x.LITTLE.PIP.roll, _x.LITTLE.PIP.pitch, _x.LITTLE.PIP.yaw, _x.LITTLE.DIP.q0, _x.LITTLE.DIP.q1, _x.LITTLE.DIP.q2, _x.LITTLE.DIP.q3, _x.LITTLE.DIP.roll, _x.LITTLE.DIP.pitch, _x.LITTLE.DIP.yaw, _x.LITTLE.MCP.q0, _x.LITTLE.MCP.q1, _x.LITTLE.MCP.q2, _x.LITTLE.MCP.q3, _x.LITTLE.MCP.roll, _x.LITTLE.MCP.pitch, _x.LITTLE.MCP.yaw, _x.PALM.q0, _x.PALM.q1, _x.PALM.q2, _x.PALM.q3, _x.PALM.roll, _x.PALM.pitch, _x.PALM.yaw,) = _get_struct_BH112f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BH112f().pack(_x.ID, _x.time, _x.THUMB.PIP.q0, _x.THUMB.PIP.q1, _x.THUMB.PIP.q2, _x.THUMB.PIP.q3, _x.THUMB.PIP.roll, _x.THUMB.PIP.pitch, _x.THUMB.PIP.yaw, _x.THUMB.DIP.q0, _x.THUMB.DIP.q1, _x.THUMB.DIP.q2, _x.THUMB.DIP.q3, _x.THUMB.DIP.roll, _x.THUMB.DIP.pitch, _x.THUMB.DIP.yaw, _x.THUMB.MCP.q0, _x.THUMB.MCP.q1, _x.THUMB.MCP.q2, _x.THUMB.MCP.q3, _x.THUMB.MCP.roll, _x.THUMB.MCP.pitch, _x.THUMB.MCP.yaw, _x.INDEX.PIP.q0, _x.INDEX.PIP.q1, _x.INDEX.PIP.q2, _x.INDEX.PIP.q3, _x.INDEX.PIP.roll, _x.INDEX.PIP.pitch, _x.INDEX.PIP.yaw, _x.INDEX.DIP.q0, _x.INDEX.DIP.q1, _x.INDEX.DIP.q2, _x.INDEX.DIP.q3, _x.INDEX.DIP.roll, _x.INDEX.DIP.pitch, _x.INDEX.DIP.yaw, _x.INDEX.MCP.q0, _x.INDEX.MCP.q1, _x.INDEX.MCP.q2, _x.INDEX.MCP.q3, _x.INDEX.MCP.roll, _x.INDEX.MCP.pitch, _x.INDEX.MCP.yaw, _x.MIDDLE.PIP.q0, _x.MIDDLE.PIP.q1, _x.MIDDLE.PIP.q2, _x.MIDDLE.PIP.q3, _x.MIDDLE.PIP.roll, _x.MIDDLE.PIP.pitch, _x.MIDDLE.PIP.yaw, _x.MIDDLE.DIP.q0, _x.MIDDLE.DIP.q1, _x.MIDDLE.DIP.q2, _x.MIDDLE.DIP.q3, _x.MIDDLE.DIP.roll, _x.MIDDLE.DIP.pitch, _x.MIDDLE.DIP.yaw, _x.MIDDLE.MCP.q0, _x.MIDDLE.MCP.q1, _x.MIDDLE.MCP.q2, _x.MIDDLE.MCP.q3, _x.MIDDLE.MCP.roll, _x.MIDDLE.MCP.pitch, _x.MIDDLE.MCP.yaw, _x.RING.PIP.q0, _x.RING.PIP.q1, _x.RING.PIP.q2, _x.RING.PIP.q3, _x.RING.PIP.roll, _x.RING.PIP.pitch, _x.RING.PIP.yaw, _x.RING.DIP.q0, _x.RING.DIP.q1, _x.RING.DIP.q2, _x.RING.DIP.q3, _x.RING.DIP.roll, _x.RING.DIP.pitch, _x.RING.DIP.yaw, _x.RING.MCP.q0, _x.RING.MCP.q1, _x.RING.MCP.q2, _x.RING.MCP.q3, _x.RING.MCP.roll, _x.RING.MCP.pitch, _x.RING.MCP.yaw, _x.LITTLE.PIP.q0, _x.LITTLE.PIP.q1, _x.LITTLE.PIP.q2, _x.LITTLE.PIP.q3, _x.LITTLE.PIP.roll, _x.LITTLE.PIP.pitch, _x.LITTLE.PIP.yaw, _x.LITTLE.DIP.q0, _x.LITTLE.DIP.q1, _x.LITTLE.DIP.q2, _x.LITTLE.DIP.q3, _x.LITTLE.DIP.roll, _x.LITTLE.DIP.pitch, _x.LITTLE.DIP.yaw, _x.LITTLE.MCP.q0, _x.LITTLE.MCP.q1, _x.LITTLE.MCP.q2, _x.LITTLE.MCP.q3, _x.LITTLE.MCP.roll, _x.LITTLE.MCP.pitch, _x.LITTLE.MCP.yaw, _x.PALM.q0, _x.PALM.q1, _x.PALM.q2, _x.PALM.q3, _x.PALM.roll, _x.PALM.pitch, _x.PALM.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.THUMB is None:
        self.THUMB = serial_communication.msg.finger_imu()
      if self.INDEX is None:
        self.INDEX = serial_communication.msg.finger_imu()
      if self.MIDDLE is None:
        self.MIDDLE = serial_communication.msg.finger_imu()
      if self.RING is None:
        self.RING = serial_communication.msg.finger_imu()
      if self.LITTLE is None:
        self.LITTLE = serial_communication.msg.finger_imu()
      if self.PALM is None:
        self.PALM = serial_communication.msg.imu_data()
      end = 0
      _x = self
      start = end
      end += 451
      (_x.ID, _x.time, _x.THUMB.PIP.q0, _x.THUMB.PIP.q1, _x.THUMB.PIP.q2, _x.THUMB.PIP.q3, _x.THUMB.PIP.roll, _x.THUMB.PIP.pitch, _x.THUMB.PIP.yaw, _x.THUMB.DIP.q0, _x.THUMB.DIP.q1, _x.THUMB.DIP.q2, _x.THUMB.DIP.q3, _x.THUMB.DIP.roll, _x.THUMB.DIP.pitch, _x.THUMB.DIP.yaw, _x.THUMB.MCP.q0, _x.THUMB.MCP.q1, _x.THUMB.MCP.q2, _x.THUMB.MCP.q3, _x.THUMB.MCP.roll, _x.THUMB.MCP.pitch, _x.THUMB.MCP.yaw, _x.INDEX.PIP.q0, _x.INDEX.PIP.q1, _x.INDEX.PIP.q2, _x.INDEX.PIP.q3, _x.INDEX.PIP.roll, _x.INDEX.PIP.pitch, _x.INDEX.PIP.yaw, _x.INDEX.DIP.q0, _x.INDEX.DIP.q1, _x.INDEX.DIP.q2, _x.INDEX.DIP.q3, _x.INDEX.DIP.roll, _x.INDEX.DIP.pitch, _x.INDEX.DIP.yaw, _x.INDEX.MCP.q0, _x.INDEX.MCP.q1, _x.INDEX.MCP.q2, _x.INDEX.MCP.q3, _x.INDEX.MCP.roll, _x.INDEX.MCP.pitch, _x.INDEX.MCP.yaw, _x.MIDDLE.PIP.q0, _x.MIDDLE.PIP.q1, _x.MIDDLE.PIP.q2, _x.MIDDLE.PIP.q3, _x.MIDDLE.PIP.roll, _x.MIDDLE.PIP.pitch, _x.MIDDLE.PIP.yaw, _x.MIDDLE.DIP.q0, _x.MIDDLE.DIP.q1, _x.MIDDLE.DIP.q2, _x.MIDDLE.DIP.q3, _x.MIDDLE.DIP.roll, _x.MIDDLE.DIP.pitch, _x.MIDDLE.DIP.yaw, _x.MIDDLE.MCP.q0, _x.MIDDLE.MCP.q1, _x.MIDDLE.MCP.q2, _x.MIDDLE.MCP.q3, _x.MIDDLE.MCP.roll, _x.MIDDLE.MCP.pitch, _x.MIDDLE.MCP.yaw, _x.RING.PIP.q0, _x.RING.PIP.q1, _x.RING.PIP.q2, _x.RING.PIP.q3, _x.RING.PIP.roll, _x.RING.PIP.pitch, _x.RING.PIP.yaw, _x.RING.DIP.q0, _x.RING.DIP.q1, _x.RING.DIP.q2, _x.RING.DIP.q3, _x.RING.DIP.roll, _x.RING.DIP.pitch, _x.RING.DIP.yaw, _x.RING.MCP.q0, _x.RING.MCP.q1, _x.RING.MCP.q2, _x.RING.MCP.q3, _x.RING.MCP.roll, _x.RING.MCP.pitch, _x.RING.MCP.yaw, _x.LITTLE.PIP.q0, _x.LITTLE.PIP.q1, _x.LITTLE.PIP.q2, _x.LITTLE.PIP.q3, _x.LITTLE.PIP.roll, _x.LITTLE.PIP.pitch, _x.LITTLE.PIP.yaw, _x.LITTLE.DIP.q0, _x.LITTLE.DIP.q1, _x.LITTLE.DIP.q2, _x.LITTLE.DIP.q3, _x.LITTLE.DIP.roll, _x.LITTLE.DIP.pitch, _x.LITTLE.DIP.yaw, _x.LITTLE.MCP.q0, _x.LITTLE.MCP.q1, _x.LITTLE.MCP.q2, _x.LITTLE.MCP.q3, _x.LITTLE.MCP.roll, _x.LITTLE.MCP.pitch, _x.LITTLE.MCP.yaw, _x.PALM.q0, _x.PALM.q1, _x.PALM.q2, _x.PALM.q3, _x.PALM.roll, _x.PALM.pitch, _x.PALM.yaw,) = _get_struct_BH112f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BH112f = None
def _get_struct_BH112f():
    global _struct_BH112f
    if _struct_BH112f is None:
        _struct_BH112f = struct.Struct("<BH112f")
    return _struct_BH112f
