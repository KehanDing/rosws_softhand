// Generated by gencpp from file nano_17_ethercat/FT_nano17.msg
// DO NOT EDIT!


#ifndef NANO_17_ETHERCAT_MESSAGE_FT_NANO17_H
#define NANO_17_ETHERCAT_MESSAGE_FT_NANO17_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nano_17_ethercat
{
template <class ContainerAllocator>
struct FT_nano17_
{
  typedef FT_nano17_<ContainerAllocator> Type;

  FT_nano17_()
    : TORQUE_X(0.0)
    , TORQUE_Y(0.0)
    , TORQUE_Z(0.0)
    , FORCE_X(0.0)
    , FORCE_Y(0.0)
    , FORCE_Z(0.0)  {
    }
  FT_nano17_(const ContainerAllocator& _alloc)
    : TORQUE_X(0.0)
    , TORQUE_Y(0.0)
    , TORQUE_Z(0.0)
    , FORCE_X(0.0)
    , FORCE_Y(0.0)
    , FORCE_Z(0.0)  {
  (void)_alloc;
    }



   typedef float _TORQUE_X_type;
  _TORQUE_X_type TORQUE_X;

   typedef float _TORQUE_Y_type;
  _TORQUE_Y_type TORQUE_Y;

   typedef float _TORQUE_Z_type;
  _TORQUE_Z_type TORQUE_Z;

   typedef float _FORCE_X_type;
  _FORCE_X_type FORCE_X;

   typedef float _FORCE_Y_type;
  _FORCE_Y_type FORCE_Y;

   typedef float _FORCE_Z_type;
  _FORCE_Z_type FORCE_Z;





  typedef boost::shared_ptr< ::nano_17_ethercat::FT_nano17_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nano_17_ethercat::FT_nano17_<ContainerAllocator> const> ConstPtr;

}; // struct FT_nano17_

typedef ::nano_17_ethercat::FT_nano17_<std::allocator<void> > FT_nano17;

typedef boost::shared_ptr< ::nano_17_ethercat::FT_nano17 > FT_nano17Ptr;
typedef boost::shared_ptr< ::nano_17_ethercat::FT_nano17 const> FT_nano17ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nano_17_ethercat::FT_nano17_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nano_17_ethercat::FT_nano17_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nano_17_ethercat::FT_nano17_<ContainerAllocator1> & lhs, const ::nano_17_ethercat::FT_nano17_<ContainerAllocator2> & rhs)
{
  return lhs.TORQUE_X == rhs.TORQUE_X &&
    lhs.TORQUE_Y == rhs.TORQUE_Y &&
    lhs.TORQUE_Z == rhs.TORQUE_Z &&
    lhs.FORCE_X == rhs.FORCE_X &&
    lhs.FORCE_Y == rhs.FORCE_Y &&
    lhs.FORCE_Z == rhs.FORCE_Z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nano_17_ethercat::FT_nano17_<ContainerAllocator1> & lhs, const ::nano_17_ethercat::FT_nano17_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nano_17_ethercat

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nano_17_ethercat::FT_nano17_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nano_17_ethercat::FT_nano17_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nano_17_ethercat::FT_nano17_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nano_17_ethercat::FT_nano17_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nano_17_ethercat::FT_nano17_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nano_17_ethercat::FT_nano17_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nano_17_ethercat::FT_nano17_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3cc10406904387a2b764bbc39a449c3";
  }

  static const char* value(const ::nano_17_ethercat::FT_nano17_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3cc10406904387aULL;
  static const uint64_t static_value2 = 0x2b764bbc39a449c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::nano_17_ethercat::FT_nano17_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nano_17_ethercat/FT_nano17";
  }

  static const char* value(const ::nano_17_ethercat::FT_nano17_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nano_17_ethercat::FT_nano17_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 TORQUE_X\n"
"float32 TORQUE_Y\n"
"float32 TORQUE_Z\n"
"float32 FORCE_X\n"
"float32 FORCE_Y\n"
"float32 FORCE_Z\n"
;
  }

  static const char* value(const ::nano_17_ethercat::FT_nano17_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nano_17_ethercat::FT_nano17_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.TORQUE_X);
      stream.next(m.TORQUE_Y);
      stream.next(m.TORQUE_Z);
      stream.next(m.FORCE_X);
      stream.next(m.FORCE_Y);
      stream.next(m.FORCE_Z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FT_nano17_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nano_17_ethercat::FT_nano17_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nano_17_ethercat::FT_nano17_<ContainerAllocator>& v)
  {
    s << indent << "TORQUE_X: ";
    Printer<float>::stream(s, indent + "  ", v.TORQUE_X);
    s << indent << "TORQUE_Y: ";
    Printer<float>::stream(s, indent + "  ", v.TORQUE_Y);
    s << indent << "TORQUE_Z: ";
    Printer<float>::stream(s, indent + "  ", v.TORQUE_Z);
    s << indent << "FORCE_X: ";
    Printer<float>::stream(s, indent + "  ", v.FORCE_X);
    s << indent << "FORCE_Y: ";
    Printer<float>::stream(s, indent + "  ", v.FORCE_Y);
    s << indent << "FORCE_Z: ";
    Printer<float>::stream(s, indent + "  ", v.FORCE_Z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NANO_17_ETHERCAT_MESSAGE_FT_NANO17_H
